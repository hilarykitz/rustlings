{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6","program":"/Users/hkierans/.rustup/toolchains/1.46.0-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","regex","/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=ea998285a598cdc9","-C","extra-filename=-ea998285a598cdc9","--out-dir","/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps","--target","wasm32-wasi","-L","dependency=/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps","-L","dependency=/Users/hkierans/git/rustlings/target/rls/debug/deps","--extern","aho_corasick=/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps/libaho_corasick-2c204bd27d18d31c.rmeta","--extern","memchr=/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps/libmemchr-5a1e6a68814f8297.rmeta","--extern","regex_syntax=/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps/libregex_syntax-bf06182ffd7cbeb4.rmeta","--extern","thread_local=/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps/libthread_local-5c2fd2c18a0f5856.rmeta","--extern","utf8_ranges=/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps/libutf8_ranges-a880a5f5644b7f5c.rmeta","--cap-lints","allow","--cfg","regex_runtime_teddy_ssse3","--cfg","regex_runtime_teddy_avx2","--error-format=json","--sysroot","/Users/hkierans/.rustup/toolchains/1.46.0-x86_64-apple-darwin"],"output":"/Users/hkierans/git/rustlings/target/rls/wasm32-wasi/debug/deps/libregex-ea998285a598cdc9.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[9665034658594689555,13597417604013649162]},"crate_root":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src","external_crates":[{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5667833858258883823,13242588530091765400]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8110447602695971269,8676687311819459955]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1977302655726686608,953103619856713457]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11905209190829975376,3819393287013156986]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11690492093593844056,2872191488609793282]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18098705458808837715,1814006493926881252]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2611730592681041111,17032882826349286576]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[457283805966065238,4600467572994166777]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12456973456254240080,8985489576662881139]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[5747831985490409680,4186789431985934656]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6601500434124963192,9147336962633508510]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15111149435740138899,11337326753376177638]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":13,"id":{"name":"wasi","disambiguator":[14368520281807761496,13345711174577213831]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":14,"id":{"name":"aho_corasick","disambiguator":[6539922838607527872,5767392447974948076]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":15,"id":{"name":"memchr","disambiguator":[18252917314283876665,17632120479738691658]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":16,"id":{"name":"thread_local","disambiguator":[1135351481201760469,16414995857854585136]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":17,"id":{"name":"lazy_static","disambiguator":[14454136652707003259,15060839948814008820]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":18,"id":{"name":"regex_syntax","disambiguator":[86842807042093554,13134460086737507757]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":19,"id":{"name":"ucd_util","disambiguator":[799137129462165117,6901597677379801333]}},{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","num":20,"id":{"name":"utf8_ranges","disambiguator":[9579693165920666610,7790348702721616046]}}],"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1618},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18630,"byte_end":18635,"line_start":537,"line_end":537,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2389},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18899,"byte_end":18904,"line_start":547,"line_end":547,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2365},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18906,"byte_end":18911,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1230},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18913,"byte_end":18921,"line_start":547,"line_end":547,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1194},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18927,"byte_end":18939,"line_start":548,"line_end":548,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1296},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18941,"byte_end":18948,"line_start":548,"line_end":548,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1285},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18950,"byte_end":18964,"line_start":548,"line_end":548,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1273},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18966,"byte_end":18983,"line_start":548,"line_end":548,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2394},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18989,"byte_end":19005,"line_start":549,"line_end":549,"column_start":5,"column_end":21},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1225},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19007,"byte_end":19016,"line_start":549,"line_end":549,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19022,"byte_end":19030,"line_start":550,"line_end":550,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2401},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19032,"byte_end":19043,"line_start":550,"line_end":550,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1327},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1205},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19055,"byte_end":19060,"line_start":550,"line_end":550,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1215},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19062,"byte_end":19068,"line_start":550,"line_end":550,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1126},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19074,"byte_end":19080,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23230,"byte_end":23238,"line_start":678,"line_end":678,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23259,"byte_end":23263,"line_start":679,"line_end":679,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23265,"byte_end":23276,"line_start":679,"line_end":679,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":1789},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23299,"byte_end":23303,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":534},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23305,"byte_end":23310,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":1765},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23312,"byte_end":23321,"line_start":680,"line_end":680,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":1755},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23323,"byte_end":23330,"line_start":680,"line_end":680,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":1843},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23354,"byte_end":23369,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":1944},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23390,"byte_end":23397,"line_start":682,"line_end":682,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":1962},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23399,"byte_end":23403,"line_start":682,"line_end":682,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":2009},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23405,"byte_end":23414,"line_start":682,"line_end":682,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1354}},{"kind":"Use","ref_id":{"krate":0,"index":2044},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23416,"byte_end":23426,"line_start":682,"line_end":682,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1354}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":2441},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":62},{"krate":0,"index":75},{"krate":0,"index":195},{"krate":0,"index":328},{"krate":0,"index":338},{"krate":0,"index":488},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":614},{"krate":0,"index":744},{"krate":0,"index":772},{"krate":0,"index":816},{"krate":0,"index":821},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1107},{"krate":0,"index":1334},{"krate":0,"index":1353},{"krate":0,"index":1354}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"!\nThis crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.\n\nThis crate's documentation provides some simple examples, describes\n[Unicode support](#unicode) and exhaustively lists the\n[supported syntax](#syntax).\n\nFor more specific details on the API for regular expressions, please see the\ndocumentation for the [`Regex`](struct.Regex.html) type.\n\n# Usage\n\nThis crate is [on crates.io](https://crates.io/crates/regex) and can be\nused by adding `regex` to your dependencies in your project's `Cargo.toml`.\n\n```toml\n[dependencies]\nregex = \"1\"\n```\n\nand this to your crate root:\n\n```rust\nextern crate regex;\n```\n\n# Example: find a date\n\nGeneral use of regular expressions in this package involves compiling an\nexpression and then using it to search, split or replace text. For example,\nto confirm that some text resembles a date:\n\n```rust\nuse regex::Regex;\nlet re = Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\nassert!(re.is_match(\"2014-01-01\"));\n```\n\nNotice the use of the `^` and `$` anchors. In this crate, every expression\nis executed with an implicit `.*?` at the beginning and end, which allows\nit to match anywhere in the text. Anchors can be used to ensure that the\nfull text matches an expression.\n\nThis example also demonstrates the utility of\n[raw strings](https://doc.rust-lang.org/stable/reference/tokens.html#raw-string-literals)\nin Rust, which\nare just like regular strings except they are prefixed with an `r` and do\nnot process any escape sequences. For example, `\"\\\\d\"` is the same\nexpression as `r\"\\d\"`.\n\n# Example: Avoid compiling the same regex in a loop\n\nIt is an anti-pattern to compile the same regular expression in a loop\nsince compilation is typically expensive. (It takes anywhere from a few\nmicroseconds to a few **milliseconds** depending on the size of the\nregex.) Not only is compilation itself expensive, but this also prevents\noptimizations that reuse allocations internally to the matching engines.\n\nIn Rust, it can sometimes be a pain to pass regular expressions around if\nthey're used from inside a helper function. Instead, we recommend using the\n[`lazy_static`](https://crates.io/crates/lazy_static) crate to ensure that\nregular expressions are compiled exactly once.\n\nFor example:\n\n```rust\n#[macro_use] extern crate lazy_static;\nextern crate regex;\n\nuse regex::Regex;\n\nfn some_helper_function(text: &str) -> bool {\n    lazy_static! {\n        static ref RE: Regex = Regex::new(\"...\").unwrap();\n    }\n    RE.is_match(text)\n}\n\nfn main() {}\n```\n\nSpecifically, in this example, the regex will be compiled when it is used for\nthe first time. On subsequent uses, it will reuse the previous compilation.\n\n# Example: iterating over capture groups\n\nThis crate provides convenient iterators for matching an expression\nrepeatedly against a search string to find successive non-overlapping\nmatches. For example, to find all dates in a string and be able to access\nthem by their component pieces:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(\\d{4})-(\\d{2})-(\\d{2})\").unwrap();\nlet text = \"2012-03-14, 2013-01-01 and 2014-07-05\";\nfor cap in re.captures_iter(text) {\n    println!(\"Month: {} Day: {} Year: {}\", &cap[2], &cap[3], &cap[1]);\n}\n// Output:\n// Month: 03 Day: 14 Year: 2012\n// Month: 01 Day: 01 Year: 2013\n// Month: 07 Day: 05 Year: 2014\n# }\n```\n\nNotice that the year is in the capture group indexed at `1`. This is\nbecause the *entire match* is stored in the capture group at index `0`.\n\n# Example: replacement with named capture groups\n\nBuilding on the previous example, perhaps we'd like to rearrange the date\nformats. This can be done with text replacement. But to make the code\nclearer, we can *name*  our capture groups and use those names as variables\nin our replacement text:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?P<y>\\d{4})-(?P<m>\\d{2})-(?P<d>\\d{2})\").unwrap();\nlet before = \"2012-03-14, 2013-01-01 and 2014-07-05\";\nlet after = re.replace_all(before, \"$m/$d/$y\");\nassert_eq!(after, \"03/14/2012, 01/01/2013 and 07/05/2014\");\n# }\n```\n\nThe `replace` methods are actually polymorphic in the replacement, which\nprovides more flexibility than is seen here. (See the documentation for\n`Regex::replace` for more details.)\n\nNote that if your regex gets complicated, you can use the `x` flag to\nenable insignificant whitespace mode, which also lets you write comments:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?x)\n  (?P<y>\\d{4}) # the year\n  -\n  (?P<m>\\d{2}) # the month\n  -\n  (?P<d>\\d{2}) # the day\n\").unwrap();\nlet before = \"2012-03-14, 2013-01-01 and 2014-07-05\";\nlet after = re.replace_all(before, \"$m/$d/$y\");\nassert_eq!(after, \"03/14/2012, 01/01/2013 and 07/05/2014\");\n# }\n```\n\nIf you wish to match against whitespace in this mode, you can still use `\\s`,\n`\\n`, `\\t`, etc. For escaping a single space character, you can use its hex\ncharacter code `\\x20` or temporarily disable the `x` flag, e.g., `(?-x: )`.\n\n# Example: match multiple regular expressions simultaneously\n\nThis demonstrates how to use a `RegexSet` to match multiple (possibly\noverlapping) regular expressions in a single scan of the search text:\n\n```rust\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\n\n// Iterate over and collect all of the matches.\nlet matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\nassert_eq!(matches, vec![0, 2, 3, 4, 6]);\n\n// You can also test whether a particular regex matched:\nlet matches = set.matches(\"foobar\");\nassert!(!matches.matched(5));\nassert!(matches.matched(6));\n```\n\n# Pay for what you use\n\nWith respect to searching text with a regular expression, there are three\nquestions that can be asked:\n\n1. Does the text match this expression?\n2. If so, where does it match?\n3. Where did the capturing groups match?\n\nGenerally speaking, this crate could provide a function to answer only #3,\nwhich would subsume #1 and #2 automatically. However, it can be significantly\nmore expensive to compute the location of capturing group matches, so it's best\nnot to do it if you don't need to.\n\nTherefore, only use what you need. For example, don't use `find` if you\nonly need to test if an expression matches a string. (Use `is_match`\ninstead.)\n\n# Unicode\n\nThis implementation executes regular expressions **only** on valid UTF-8\nwhile exposing match locations as byte indices into the search string.\n\nOnly simple case folding is supported. Namely, when matching\ncase-insensitively, the characters are first mapped using the \"simple\" case\nfolding rules defined by Unicode.\n\nRegular expressions themselves are **only** interpreted as a sequence of\nUnicode scalar values. This means you can use Unicode characters directly\nin your expression:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?i)Δ+\").unwrap();\nlet mat = re.find(\"ΔδΔ\").unwrap();\nassert_eq!((mat.start(), mat.end()), (0, 6));\n# }\n```\n\nMost features of the regular expressions in this crate are Unicode aware. Here\nare some examples:\n\n* `.` will match any valid UTF-8 encoded Unicode scalar value except for `\\n`.\n  (To also match `\\n`, enable the `s` flag, e.g., `(?s:.)`.)\n* `\\w`, `\\d` and `\\s` are Unicode aware. For example, `\\s` will match all forms\n  of whitespace categorized by Unicode.\n* `\\b` matches a Unicode word boundary.\n* Negated character classes like `[^a]` match all Unicode scalar values except\n  for `a`.\n* `^` and `$` are **not** Unicode aware in multi-line mode. Namely, they only\n  recognize `\\n` and not any of the other forms of line terminators defined\n  by Unicode.\n\nUnicode general categories, scripts, script extensions, ages and a smattering\nof boolean properties are available as character classes. For example, you can\nmatch a sequence of numerals, Greek or Cherokee letters:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"[\\pN\\p{Greek}\\p{Cherokee}]+\").unwrap();\nlet mat = re.find(\"abcΔᎠβⅠᏴγδⅡxyz\").unwrap();\nassert_eq!((mat.start(), mat.end()), (3, 23));\n# }\n```\n\nFor a more detailed breakdown of Unicode support with respect to\n[UTS#18](http://unicode.org/reports/tr18/),\nplease see the\n[UNICODE](https://github.com/rust-lang/regex/blob/master/UNICODE.md)\ndocument in the root of the regex repository.\n\n# Opt out of Unicode support\n\nThe `bytes` sub-module provides a `Regex` type that can be used to match\non `&[u8]`. By default, text is interpreted as UTF-8 just like it is with\nthe main `Regex` type. However, this behavior can be disabled by turning\noff the `u` flag, even if doing so could result in matching invalid UTF-8.\nFor example, when the `u` flag is disabled, `.` will match any byte instead\nof any Unicode scalar value.\n\nDisabling the `u` flag is also possible with the standard `&str`-based `Regex`\ntype, but it is only allowed where the UTF-8 invariant is maintained. For\nexample, `(?-u:\\w)` is an ASCII-only `\\w` character class and is legal in an\n`&str`-based `Regex`, but `(?-u:\\xFF)` will attempt to match the raw byte\n`\\xFF`, which is invalid UTF-8 and therefore is illegal in `&str`-based\nregexes.\n\n# Syntax\n\nThe syntax supported in this crate is documented below.\n\nNote that the regular expression parser and abstract syntax are exposed in\na separate crate, [`regex-syntax`](https://docs.rs/regex-syntax).\n\n## Matching one character\n\n<pre class=\"rust\">\n.             any character except new line (includes new line with s flag)\n\\d            digit (\\p{Nd})\n\\D            not digit\n\\pN           One-letter name Unicode character class\n\\p{Greek}     Unicode character class (general category or script)\n\\PN           Negated one-letter name Unicode character class\n\\P{Greek}     negated Unicode character class (general category or script)\n</pre>\n\n### Character classes\n\n<pre class=\"rust\">\n[xyz]         A character class matching either x, y or z (union).\n[^xyz]        A character class matching any character except x, y and z.\n[a-z]         A character class matching any character in range a-z.\n[[:alpha:]]   ASCII character class ([A-Za-z])\n[[:^alpha:]]  Negated ASCII character class ([^A-Za-z])\n[x[^xyz]]     Nested/grouping character class (matching any character except y and z)\n[a-y&&xyz]    Intersection (matching x or y)\n[0-9&&[^4]]   Subtraction using intersection and negation (matching 0-9 except 4)\n[0-9--4]      Direct subtraction (matching 0-9 except 4)\n[a-g~~b-h]    Symmetric difference (matching `a` and `h` only)\n[\\[\\]]        Escaping in character classes (matching [ or ])\n</pre>\n\nAny named character class may appear inside a bracketed `[...]` character\nclass. For example, `[\\p{Greek}[:digit:]]` matches any Greek or ASCII\ndigit. `[\\p{Greek}&&\\pL]` matches Greek letters.\n\nPrecedence in character classes, from most binding to least:\n\n1. Ranges: `a-cd` == `[a-c]d`\n2. Union: `ab&&bc` == `[ab]&&[bc]`\n3. Intersection: `^a-z&&b` == `^[a-z&&b]`\n4. Negation\n\n## Composites\n\n<pre class=\"rust\">\nxy    concatenation (x followed by y)\nx|y   alternation (x or y, prefer x)\n</pre>\n\n## Repetitions\n\n<pre class=\"rust\">\nx*        zero or more of x (greedy)\nx+        one or more of x (greedy)\nx?        zero or one of x (greedy)\nx*?       zero or more of x (ungreedy/lazy)\nx+?       one or more of x (ungreedy/lazy)\nx??       zero or one of x (ungreedy/lazy)\nx{n,m}    at least n x and at most m x (greedy)\nx{n,}     at least n x (greedy)\nx{n}      exactly n x\nx{n,m}?   at least n x and at most m x (ungreedy/lazy)\nx{n,}?    at least n x (ungreedy/lazy)\nx{n}?     exactly n x\n</pre>\n\n## Empty matches\n\n<pre class=\"rust\">\n^     the beginning of text (or start-of-line with multi-line mode)\n$     the end of text (or end-of-line with multi-line mode)\n\\A    only the beginning of text (even with multi-line mode enabled)\n\\z    only the end of text (even with multi-line mode enabled)\n\\b    a Unicode word boundary (\\w on one side and \\W, \\A, or \\z on other)\n\\B    not a Unicode word boundary\n</pre>\n\n## Grouping and flags\n\n<pre class=\"rust\">\n(exp)          numbered capture group (indexed by opening parenthesis)\n(?P&lt;name&gt;exp)  named (also numbered) capture group (allowed chars: [_0-9a-zA-Z])\n(?:exp)        non-capturing group\n(?flags)       set flags within current group\n(?flags:exp)   set flags for exp (non-capturing)\n</pre>\n\nFlags are each a single character. For example, `(?x)` sets the flag `x`\nand `(?-x)` clears the flag `x`. Multiple flags can be set or cleared at\nthe same time: `(?xy)` sets both the `x` and `y` flags and `(?x-y)` sets\nthe `x` flag and clears the `y` flag.\n\nAll flags are by default disabled unless stated otherwise. They are:\n\n<pre class=\"rust\">\ni     case-insensitive: letters match both upper and lower case\nm     multi-line mode: ^ and $ match begin/end of line\ns     allow . to match \\n\nU     swap the meaning of x* and x*?\nu     Unicode support (enabled by default)\nx     ignore whitespace and allow line comments (starting with `#`)\n</pre>\n\nFlags can be toggled within a pattern. Here's an example that matches\ncase-insensitively for the first part but case-sensitively for the second part:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?i)a+(?-i)b+\").unwrap();\nlet cap = re.captures(\"AaAaAbbBBBb\").unwrap();\nassert_eq!(&cap[0], \"AaAaAbb\");\n# }\n```\n\nNotice that the `a+` matches either `a` or `A`, but the `b+` only matches\n`b`.\n\nMulti-line mode means `^` and `$` no longer match just at the beginning/end of\nthe input, but at the beginning/end of lines:\n\n```\n# use regex::Regex;\nlet re = Regex::new(r\"(?m)^line \\d+\").unwrap();\nlet m = re.find(\"line one\\nline 2\\n\").unwrap();\nassert_eq!(m.as_str(), \"line 2\");\n```\n\nNote that `^` matches after new lines, even at the end of input:\n\n```\n# use regex::Regex;\nlet re = Regex::new(r\"(?m)^\").unwrap();\nlet m = re.find_iter(\"test\\n\").last().unwrap();\nassert_eq!((m.start(), m.end()), (5, 5));\n```\n\nHere is an example that uses an ASCII word boundary instead of a Unicode\nword boundary:\n\n```rust\n# extern crate regex; use regex::Regex;\n# fn main() {\nlet re = Regex::new(r\"(?-u:\\b).+(?-u:\\b)\").unwrap();\nlet cap = re.captures(\"$$abc$$\").unwrap();\nassert_eq!(&cap[0], \"abc\");\n# }\n```\n\n## Escape sequences\n\n<pre class=\"rust\">\n\\*          literal *, works for any punctuation character: \\.+*?()|[]{}^$\n\\a          bell (\\x07)\n\\f          form feed (\\x0C)\n\\t          horizontal tab\n\\n          new line\n\\r          carriage return\n\\v          vertical tab (\\x0B)\n\\123        octal character code (up to three digits) (when enabled)\n\\x7F        hex character code (exactly two digits)\n\\x{10FFFF}  any hex character code corresponding to a Unicode code point\n\\u007F      hex character code (exactly four digits)\n\\u{7F}      any hex character code corresponding to a Unicode code point\n\\U0000007F  hex character code (exactly eight digits)\n\\U{7F}      any hex character code corresponding to a Unicode code point\n</pre>\n\n## Perl character classes (Unicode friendly)\n\nThese classes are based on the definitions provided in\n[UTS#18](http://www.unicode.org/reports/tr18/#Compatibility_Properties):\n\n<pre class=\"rust\">\n\\d     digit (\\p{Nd})\n\\D     not digit\n\\s     whitespace (\\p{White_Space})\n\\S     not whitespace\n\\w     word character (\\p{Alphabetic} + \\p{M} + \\d + \\p{Pc} + \\p{Join_Control})\n\\W     not word character\n</pre>\n\n## ASCII character classes\n\n<pre class=\"rust\">\n[[:alnum:]]    alphanumeric ([0-9A-Za-z])\n[[:alpha:]]    alphabetic ([A-Za-z])\n[[:ascii:]]    ASCII ([\\x00-\\x7F])\n[[:blank:]]    blank ([\\t ])\n[[:cntrl:]]    control ([\\x00-\\x1F\\x7F])\n[[:digit:]]    digits ([0-9])\n[[:graph:]]    graphical ([!-~])\n[[:lower:]]    lower case ([a-z])\n[[:print:]]    printable ([ -~])\n[[:punct:]]    punctuation ([!-/:-@\\[-`{-~])\n[[:space:]]    whitespace ([\\t\\n\\v\\f\\r ])\n[[:upper:]]    upper case ([A-Z])\n[[:word:]]     word characters ([0-9A-Za-z_])\n[[:xdigit:]]   hex digit ([0-9A-Fa-f])\n</pre>\n\n# Untrusted input\n\nThis crate can handle both untrusted regular expressions and untrusted\nsearch text.\n\nUntrusted regular expressions are handled by capping the size of a compiled\nregular expression.\n(See [`RegexBuilder::size_limit`](struct.RegexBuilder.html#method.size_limit).)\nWithout this, it would be trivial for an attacker to exhaust your system's\nmemory with expressions like `a{100}{100}{100}`.\n\nUntrusted search text is allowed because the matching engine(s) in this\ncrate have time complexity `O(mn)` (with `m ~ regex` and `n ~ search\ntext`), which means there's no way to cause exponential blow-up like with\nsome other regular expression engines. (We pay for this by disallowing\nfeatures like arbitrary look-ahead and backreferences.)\n\nWhen a DFA is used, pathological cases with exponential state blow-up are\navoided by constructing the DFA lazily or in an \"online\" manner. Therefore,\nat most one new state can be created for each byte of input. This satisfies\nour time complexity guarantees, but can lead to memory growth\nproportional to the size of the input. As a stopgap, the DFA is only\nallowed to store a fixed number of states. When the limit is reached, its\nstates are wiped and continues on, possibly duplicating previous work. If\nthe limit is reached too frequently, it gives up and hands control off to\nanother matching engine with fixed memory requirements.\n(The DFA size limit can also be tweaked. See\n[`RegexBuilder::dfa_size_limit`](struct.RegexBuilder.html#method.dfa_size_limit).)\n*/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":472,"byte_end":18171,"line_start":11,"line_end":518,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":18173,"byte_end":18195,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":22507,"byte_end":22512,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"*\nMatch regular expressions on arbitrary bytes.\n\nThis module provides a nearly identical API to the one found in the\ntop-level of this crate. There are two important differences:\n\n1. Matching is done on `&[u8]` instead of `&str`. Additionally, `Vec<u8>`\nis used where `String` would have been used.\n2. Unicode support can be disabled even when disabling it would result in\nmatching invalid UTF-8 bytes.\n\n# Example: match null terminated string\n\nThis shows how to find all null-terminated strings in a slice of bytes:\n\n```rust\n# use regex::bytes::Regex;\nlet re = Regex::new(r\"(?-u)(?P<cstr>[^\\x00]+)\\x00\").unwrap();\nlet text = b\"foo\\x00bar\\x00baz\\x00\";\n\n// Extract all of the strings without the null terminator from each match.\n// The unwrap is OK here since a match requires the `cstr` capture to match.\nlet cstrs: Vec<&[u8]> =\n    re.captures_iter(text)\n      .map(|c| c.name(\"cstr\").unwrap().as_bytes())\n      .collect();\nassert_eq!(vec![&b\"foo\"[..], &b\"bar\"[..], &b\"baz\"[..]], cstrs);\n```\n\n# Example: selectively enable Unicode support\n\nThis shows how to match an arbitrary byte pattern followed by a UTF-8 encoded\nstring (e.g., to extract a title from a Matroska file):\n\n```rust\n# use std::str;\n# use regex::bytes::Regex;\nlet re = Regex::new(\n    r\"(?-u)\\x7b\\xa9(?:[\\x80-\\xfe]|[\\x40-\\xff].)(?u:(.*))\"\n).unwrap();\nlet text = b\"\\x12\\xd0\\x3b\\x5f\\x7b\\xa9\\x85\\xe2\\x98\\x83\\x80\\x98\\x54\\x76\\x68\\x65\";\nlet caps = re.captures(text).unwrap();\n\n// Notice that despite the `.*` at the end, it will only match valid UTF-8\n// because Unicode mode was enabled with the `u` flag. Without the `u` flag,\n// the `.*` would match the rest of the bytes.\nlet mat = caps.get(1).unwrap();\nassert_eq!((7, 10), (mat.start(), mat.end()));\n\n// If there was a match, Unicode mode guarantees that `title` is valid UTF-8.\nlet title = str::from_utf8(&caps[1]).unwrap();\nassert_eq!(\"☃\", title);\n```\n\nIn general, if the Unicode flag is enabled in a capture group and that capture\nis part of the overall match, then the capture is *guaranteed* to be valid\nUTF-8.\n\n# Syntax\n\nThe supported syntax is pretty much the same as the syntax for Unicode\nregular expressions with a few changes that make sense for matching arbitrary\nbytes:\n\n1. The `u` flag can be disabled even when disabling it might cause the regex to\nmatch invalid UTF-8. When the `u` flag is disabled, the regex is said to be in\n\"ASCII compatible\" mode.\n2. In ASCII compatible mode, neither Unicode scalar values nor Unicode\ncharacter classes are allowed.\n3. In ASCII compatible mode, Perl character classes (`\\w`, `\\d` and `\\s`)\nrevert to their typical ASCII definition. `\\w` maps to `[[:word:]]`, `\\d` maps\nto `[[:digit:]]` and `\\s` maps to `[[:space:]]`.\n4. In ASCII compatible mode, word boundaries use the ASCII compatible `\\w` to\ndetermine whether a byte is a word byte or not.\n5. Hexadecimal notation can be used to specify arbitrary bytes instead of\nUnicode codepoints. For example, in ASCII compatible mode, `\\xFF` matches the\nliteral byte `\\xFF`, while in Unicode mode, `\\xFF` is a Unicode codepoint that\nmatches its UTF-8 encoding of `\\xC3\\xBF`. Similarly for octal notation when\nenabled.\n6. `.` matches any *byte* except for `\\n` instead of any Unicode scalar value.\nWhen the `s` flag is enabled, `.` matches any byte.\n\n# Performance\n\nIn general, one should expect performance on `&[u8]` to be roughly similar to\nperformance on `&str`.\n*/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":19086,"byte_end":22470,"line_start":554,"line_end":640,"column_start":1,"column_end":3}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":22471,"byte_end":22498,"line_start":641,"line_end":641,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44324,"byte_end":44332,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[{"value":"/ A compiler translates a regular expression AST to a sequence of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44179,"byte_end":44246,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ instructions. The sequence of instructions represents an NFA.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44247,"byte_end":44312,"line_start":36,"line_end":36,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44743,"byte_end":44746,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[{"value":"/ Create a new regular expression compiler.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44600,"byte_end":44645,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44650,"byte_end":44653,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Various options can be set before calling `compile` on an expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44658,"byte_end":44731,"line_start":51,"line_end":51,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45341,"byte_end":45351,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"pub fn size_limit(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[{"value":"/ The size of the resulting program is limited by size_limit. If","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45138,"byte_end":45204,"line_start":65,"line_end":65,"column_start":5,"column_end":71}},{"value":"/ the program approximately exceeds the given size (in bytes), then","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45209,"byte_end":45278,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ compilation will stop and return an error.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45283,"byte_end":45329,"line_start":67,"line_end":67,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46096,"byte_end":46101,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"pub fn bytes(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[{"value":"/ If bytes is true, then the program is compiled as a byte based","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45453,"byte_end":45519,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ automaton, which incorporates UTF-8 decoding into the machine. If it's","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45524,"byte_end":45598,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ false, then the automaton is Unicode scalar value based, e.g., an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45603,"byte_end":45672,"line_start":75,"line_end":75,"column_start":5,"column_end":74}},{"value":"/ engine utilizing such an automaton is responsible for UTF-8 decoding.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45677,"byte_end":45750,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45755,"byte_end":45758,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ The specific invariant is that when returning a byte based machine,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45763,"byte_end":45834,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ the neither the `Char` nor `Ranges` instructions are produced.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45839,"byte_end":45905,"line_start":79,"line_end":79,"column_start":5,"column_end":71}},{"value":"/ Conversely, when producing a Unicode scalar value machine, the `Bytes`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45910,"byte_end":45984,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ instruction is never produced.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":45989,"byte_end":46023,"line_start":81,"line_end":81,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46028,"byte_end":46031,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that `dfa(true)` implies `bytes(true)`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46036,"byte_end":46084,"line_start":83,"line_end":83,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46384,"byte_end":46393,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"pub fn only_utf8(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[{"value":"/ When disabled, the program compiled may match arbitrary bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46195,"byte_end":46261,"line_start":89,"line_end":89,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46266,"byte_end":46269,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ When enabled (the default), all compiled programs exclusively match","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46274,"byte_end":46345,"line_start":91,"line_end":91,"column_start":5,"column_end":76}},{"value":"/ valid UTF-8 bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46350,"byte_end":46372,"line_start":92,"line_end":92,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46876,"byte_end":46879,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"pub fn dfa(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[{"value":"/ When set, the machine returned is suitable for use in the DFA matching","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46488,"byte_end":46562,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ engine.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46567,"byte_end":46578,"line_start":99,"line_end":99,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46583,"byte_end":46586,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ In particular, this ensures that if the regex is not anchored in the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46591,"byte_end":46663,"line_start":101,"line_end":101,"column_start":5,"column_end":77}},{"value":"/ beginning, then a preceding `.*?` is included in the program. (The NFA","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46668,"byte_end":46742,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ based engines handle the preceding `.*?` explicitly, which is difficult","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46747,"byte_end":46822,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ or impossible in the DFA engine.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46827,"byte_end":46864,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47114,"byte_end":47121,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"pub fn reverse(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[{"value":"/ When set, the machine returned is suitable for matching text in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":46971,"byte_end":47038,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ reverse. In particular, all concatenations are flipped.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47043,"byte_end":47102,"line_start":111,"line_end":111,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47475,"byte_end":47482,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"pub fn compile(Self, &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[{"value":"/ Compile a regular expression given its AST.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47217,"byte_end":47264,"line_start":117,"line_end":117,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47269,"byte_end":47272,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The compiler is guaranteed to succeed unless the program exceeds the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47277,"byte_end":47349,"line_start":119,"line_end":119,"column_start":5,"column_end":77}},{"value":"/ specified size limit. If the size limit is exceeded, then compilation","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47354,"byte_end":47427,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ stops and returns an error.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":47432,"byte_end":47463,"line_start":121,"line_end":121,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1619},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159496,"byte_end":159502,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[{"value":"/ A syntax error.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159472,"byte_end":159491,"line_start":17,"line_end":17,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159622,"byte_end":159636,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[{"value":"/ The compiled program exceeded the set size limit.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159516,"byte_end":159569,"line_start":19,"line_end":19,"column_start":5,"column_end":58}},{"value":"/ The argument is the size limit imposed.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159574,"byte_end":159617,"line_start":20,"line_end":20,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1625},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159923,"byte_end":159938,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1618},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159649,"byte_end":159703,"line_start":22,"line_end":22,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159708,"byte_end":159711,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159716,"byte_end":159786,"line_start":24,"line_end":24,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159791,"byte_end":159863,"line_start":25,"line_end":25,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159868,"byte_end":159899,"line_start":26,"line_end":26,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159460,"byte_end":159465,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error {\n\n    /// A syntax error.\n    Syntax(String),\n\n    /// The compiled program exceeded the set size limit.\n    /// The argument is the size limit imposed.\n    CompiledTooBig(usize),\n\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1622},{"krate":0,"index":1625}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[{"value":"/ An error that occurred during parsing or compiling a regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159346,"byte_end":159422,"line_start":14,"line_end":14,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162995,"byte_end":162999,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[{"value":"/ `Exec` manages the execution of a regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162744,"byte_end":162801,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162802,"byte_end":162805,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ In particular, this manages the various compiled forms of a single regular","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162806,"byte_end":162884,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ expression and the choice of which matching engine to use to execute a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162885,"byte_end":162959,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":162960,"byte_end":162983,"line_start":40,"line_end":40,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1633},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163370,"byte_end":163380,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1635},{"krate":0,"index":1636}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[{"value":"/ `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163154,"byte_end":163232,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/ means it is no longer Sync, but we can now avoid the overhead of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163233,"byte_end":163301,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ synchronization to fetch the cache.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163302,"byte_end":163341,"line_start":50,"line_end":50,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163619,"byte_end":163632,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[{"value":"/ `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":163528,"byte_end":163607,"line_start":59,"line_end":59,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":165869,"byte_end":165880,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[{"value":"/ Facilitates the construction of an executor by exposing various knobs","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":165690,"byte_end":165763,"line_start":104,"line_end":104,"column_start":1,"column_end":74}},{"value":"/ to control how a regex is executed and what kinds of resources it's","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":165764,"byte_end":165835,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/ permitted to use.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":165836,"byte_end":165857,"line_start":106,"line_end":106,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166481,"byte_end":166484,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"pub fn new(&str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[{"value":"/ Create a regex execution builder.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166205,"byte_end":166242,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166247,"byte_end":166250,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This uses default settings for everything except the regex itself,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166255,"byte_end":166325,"line_start":126,"line_end":126,"column_start":5,"column_end":75}},{"value":"/ which must be provided. Further knobs can be set by calling methods,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166330,"byte_end":166402,"line_start":127,"line_end":127,"column_start":5,"column_end":77}},{"value":"/ and then finally, `build` to actually create the executor.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166407,"byte_end":166469,"line_start":128,"line_end":128,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166810,"byte_end":166818,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"pub fn new_many<I, S>(I) -> Self where S: AsRef<str>, I: IntoIterator<Item =\nS>","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[{"value":"/ Like new, but compiles the union of the given regular expressions.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166546,"byte_end":166616,"line_start":133,"line_end":133,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166621,"byte_end":166624,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Note that when compiling 2 or more regular expressions, capture groups","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166629,"byte_end":166703,"line_start":135,"line_end":135,"column_start":5,"column_end":79}},{"value":"/ are completely unsupported. (This means both `find` and `captures`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166708,"byte_end":166778,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ wont work.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166783,"byte_end":166798,"line_start":137,"line_end":137,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167118,"byte_end":167129,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"pub fn new_options(RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[{"value":"/ Create a regex execution builder.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167069,"byte_end":167106,"line_start":145,"line_end":145,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167627,"byte_end":167636,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"pub fn automatic(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[{"value":"/ Set the matching engine to be automatically determined.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167315,"byte_end":167374,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167379,"byte_end":167382,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This is the default state and will apply whatever optimizations are","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167387,"byte_end":167458,"line_start":157,"line_end":157,"column_start":5,"column_end":76}},{"value":"/ possible, such as running a DFA.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167463,"byte_end":167499,"line_start":158,"line_end":158,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167504,"byte_end":167507,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This overrides whatever was previously set via the `nfa` or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167512,"byte_end":167575,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/ `bounded_backtracking` methods.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167580,"byte_end":167615,"line_start":161,"line_end":161,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167951,"byte_end":167954,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"pub fn nfa(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[{"value":"/ Sets the matching engine to use the NFA algorithm no matter what","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167713,"byte_end":167781,"line_start":167,"line_end":167,"column_start":5,"column_end":73}},{"value":"/ optimizations are possible.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167786,"byte_end":167817,"line_start":168,"line_end":168,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167822,"byte_end":167825,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ This overrides whatever was previously set via the `automatic` or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167830,"byte_end":167899,"line_start":170,"line_end":170,"column_start":5,"column_end":74}},{"value":"/ `bounded_backtracking` methods.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":167904,"byte_end":167939,"line_start":171,"line_end":171,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168445,"byte_end":168465,"line_start":185,"line_end":185,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"pub fn bounded_backtracking(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[{"value":"/ Sets the matching engine to use a bounded backtracking engine no","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168069,"byte_end":168137,"line_start":177,"line_end":177,"column_start":5,"column_end":73}},{"value":"/ matter what optimizations are possible.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168142,"byte_end":168185,"line_start":178,"line_end":178,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168190,"byte_end":168193,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ One must use this with care, since the bounded backtracking engine","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168198,"byte_end":168268,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ uses memory proportion to `len(regex) * len(text)`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168273,"byte_end":168328,"line_start":181,"line_end":181,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168333,"byte_end":168336,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This overrides whatever was previously set via the `automatic` or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168341,"byte_end":168410,"line_start":183,"line_end":183,"column_start":5,"column_end":74}},{"value":"/ `nfa` methods.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168415,"byte_end":168433,"line_start":184,"line_end":184,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169033,"byte_end":169038,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"pub fn bytes(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[{"value":"/ Compiles byte based programs for use with the NFA matching engines.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168583,"byte_end":168654,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168659,"byte_end":168662,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ By default, the NFA engines match on Unicode scalar values. They can","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168667,"byte_end":168739,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/ be made to use byte based programs instead. In general, the byte based","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168744,"byte_end":168818,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ programs are slower because of a less efficient encoding of character","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168823,"byte_end":168896,"line_start":194,"line_end":194,"column_start":5,"column_end":78}},{"value":"/ classes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168901,"byte_end":168913,"line_start":195,"line_end":195,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168918,"byte_end":168921,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Note that this does not impact DFA matching engines, which always","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":168926,"byte_end":168995,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/ execute on bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169000,"byte_end":169021,"line_start":198,"line_end":198,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169309,"byte_end":169318,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"pub fn only_utf8(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[{"value":"/ When disabled, the program compiled may match arbitrary bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169120,"byte_end":169186,"line_start":204,"line_end":204,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169191,"byte_end":169194,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ When enabled (the default), all compiled programs exclusively match","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169199,"byte_end":169270,"line_start":206,"line_end":206,"column_start":5,"column_end":76}},{"value":"/ valid UTF-8 bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169275,"byte_end":169297,"line_start":207,"line_end":207,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169441,"byte_end":169448,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"pub fn unicode(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[{"value":"/ Set the Unicode flag.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":169404,"byte_end":169429,"line_start":213,"line_end":213,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":172557,"byte_end":172562,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"pub fn build(Self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[{"value":"/ Build an executor that can run a regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":172489,"byte_end":172545,"line_start":289,"line_end":289,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":199023,"byte_end":199038,"line_start":1062,"line_end":1062,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"pub fn many_matches_at(&Self, &mut [bool], &[u8], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[{"value":"/ Finds which regular expressions match the given text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198747,"byte_end":198804,"line_start":1055,"line_end":1055,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198809,"byte_end":198812,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ `matches` should have length equal to the number of regexes being","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198817,"byte_end":198886,"line_start":1057,"line_end":1057,"column_start":5,"column_end":74}},{"value":"/ searched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198891,"byte_end":198904,"line_start":1058,"line_end":1058,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198909,"byte_end":198912,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ This is only useful when one wants to know which regexes in a set","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198917,"byte_end":198986,"line_start":1060,"line_end":1060,"column_start":5,"column_end":74}},{"value":"/ match some text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":198991,"byte_end":199011,"line_start":1061,"line_end":1061,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":200887,"byte_end":200903,"line_start":1120,"line_end":1120,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"pub fn capture_name_idx(&Self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201032,"byte_end":201048,"line_start":1126,"line_end":1126,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"pub fn capture_name_idx(&Self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201247,"byte_end":201255,"line_start":1134,"line_end":1134,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"pub fn searcher(&Self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"/ Get a searcher that isn't Sync.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201149,"byte_end":201184,"line_start":1132,"line_end":1132,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201189,"byte_end":201206,"line_start":1133,"line_end":1133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201670,"byte_end":201682,"line_start":1146,"line_end":1146,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"pub fn searcher_str(&Self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"/ Get a searcher that isn't Sync and can match on &str.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201550,"byte_end":201607,"line_start":1144,"line_end":1144,"column_start":5,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201612,"byte_end":201629,"line_start":1145,"line_end":1145,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201808,"byte_end":201818,"line_start":1151,"line_end":1151,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"pub fn into_regex(Self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[{"value":"/ Build a Regex from this executor.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201759,"byte_end":201796,"line_start":1150,"line_end":1150,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201949,"byte_end":201963,"line_start":1156,"line_end":1156,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"pub fn into_regex_set(Self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[{"value":"/ Build a RegexSet from this executor.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201897,"byte_end":201937,"line_start":1155,"line_end":1155,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202138,"byte_end":202153,"line_start":1161,"line_end":1161,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"pub fn into_byte_regex(Self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[{"value":"/ Build a Regex from this executor that can match arbitrary bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202058,"byte_end":202126,"line_start":1160,"line_end":1160,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202311,"byte_end":202330,"line_start":1166,"line_end":1166,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"pub fn into_byte_regex_set(Self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[{"value":"/ Build a RegexSet from this executor that can match arbitrary bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202228,"byte_end":202299,"line_start":1165,"line_end":1165,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202517,"byte_end":202530,"line_start":1172,"line_end":1172,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"pub fn regex_strings(&Self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[{"value":"/ The original regular expressions given by the caller that were","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202421,"byte_end":202487,"line_start":1170,"line_end":1170,"column_start":5,"column_end":71}},{"value":"/ compiled.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202492,"byte_end":202505,"line_start":1171,"line_end":1171,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202687,"byte_end":202700,"line_start":1179,"line_end":1179,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"pub fn capture_names(&Self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[{"value":"/ Return a slice of capture names.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202585,"byte_end":202621,"line_start":1176,"line_end":1176,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202626,"byte_end":202629,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ Any capture that isn't named is None.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202634,"byte_end":202675,"line_start":1178,"line_end":1178,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202875,"byte_end":202891,"line_start":1185,"line_end":1185,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"pub fn capture_name_idx(&Self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[{"value":"/ Return a reference to named groups mapping (from group name to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202772,"byte_end":202838,"line_start":1183,"line_end":1183,"column_start":5,"column_end":71}},{"value":"/ group position).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202843,"byte_end":202863,"line_start":1184,"line_end":1184,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224347,"byte_end":224354,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"/ Represents a location in the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224266,"byte_end":224305,"line_start":23,"line_end":23,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224526,"byte_end":224534,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"pub fn is_start(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[{"value":"/ Returns true iff this position is at the beginning of the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224446,"byte_end":224514,"line_start":33,"line_end":33,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224661,"byte_end":224667,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"pub fn is_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[{"value":"/ Returns true iff this position is past the end of the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224585,"byte_end":224649,"line_start":38,"line_end":38,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224913,"byte_end":224917,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"pub fn char(&Self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[{"value":"/ Returns the character at this position.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224744,"byte_end":224787,"line_start":43,"line_end":43,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224792,"byte_end":224795,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ If this position is just before or after the input, then an absent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224800,"byte_end":224870,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/ character is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224875,"byte_end":224901,"line_start":46,"line_end":46,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225011,"byte_end":225015,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"pub fn byte(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[{"value":"/ Returns the byte at this position.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224961,"byte_end":224999,"line_start":51,"line_end":51,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225142,"byte_end":225145,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[{"value":"/ Returns the UTF-8 width of the character at this position.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225068,"byte_end":225130,"line_start":56,"line_end":56,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225290,"byte_end":225298,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[{"value":"/ Returns whether the UTF-8 width of the character at this position","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225192,"byte_end":225261,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ is zero.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225266,"byte_end":225278,"line_start":62,"line_end":62,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225406,"byte_end":225409,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"pub fn pos(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[{"value":"/ Returns the byte offset of this position.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225349,"byte_end":225394,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225530,"byte_end":225538,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"pub fn next_pos(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[{"value":"/ Returns the byte offset of the next position in the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225456,"byte_end":225518,"line_start":72,"line_end":72,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":534},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225664,"byte_end":225669,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[{"value":"/ An abstraction over input used in the matching engines.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225594,"byte_end":225653,"line_start":78,"line_end":78,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225742,"byte_end":225744,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"pub fn at(&Self, usize) -> InputAt","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[{"value":"/ Return an encoding of the position at byte offset `i`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225676,"byte_end":225734,"line_start":80,"line_end":80,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225921,"byte_end":225930,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"pub fn next_char(&Self, InputAt) -> Char","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[{"value":"/ Return the Unicode character occurring next to `at`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225779,"byte_end":225835,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225840,"byte_end":225843,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If no such character could be decoded, then `Char` is absent.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225848,"byte_end":225913,"line_start":85,"line_end":85,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226111,"byte_end":226124,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"pub fn previous_char(&Self, InputAt) -> Char","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[{"value":"/ Return the Unicode character occurring previous to `at`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":225965,"byte_end":226025,"line_start":88,"line_end":88,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226030,"byte_end":226033,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ If no such character could be decoded, then `Char` is absent.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226038,"byte_end":226103,"line_start":90,"line_end":90,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226264,"byte_end":226278,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"pub fn is_empty_match(&Self, InputAt, &InstEmptyLook) -> bool","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[{"value":"/ Return true if the given empty width instruction matches at the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226159,"byte_end":226226,"line_start":93,"line_end":93,"column_start":5,"column_end":72}},{"value":"/ input position given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226231,"byte_end":226256,"line_start":94,"line_end":94,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226385,"byte_end":226394,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"pub fn prefix_at(&Self, &LiteralSearcher, InputAt) -> Option<InputAt>","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[{"value":"/ Scan the input for a matching prefix.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226336,"byte_end":226377,"line_start":97,"line_end":97,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226544,"byte_end":226547,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[{"value":"/ The number of bytes in the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226499,"byte_end":226536,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226609,"byte_end":226617,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[{"value":"/ Whether the input is empty.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226570,"byte_end":226601,"line_start":107,"line_end":107,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226716,"byte_end":226724,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[{"value":"/ Return the given input as a sequence of bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":226658,"byte_end":226708,"line_start":110,"line_end":110,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227468,"byte_end":227477,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"/ An input reader over characters.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227390,"byte_end":227426,"line_start":138,"line_end":138,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227596,"byte_end":227599,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"pub fn new(&'t [u8]) -> CharInput","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[{"value":"/ Return a new character input reader for the given string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227523,"byte_end":227584,"line_start":143,"line_end":143,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1789},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233541,"byte_end":233545,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"/ An inline representation of `Option<char>`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233121,"byte_end":233168,"line_start":337,"line_end":337,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233169,"byte_end":233172,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ This eliminates the need to do case analysis on `Option<char>` to determine","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233173,"byte_end":233252,"line_start":339,"line_end":339,"column_start":1,"column_end":80}},{"value":"/ ordinality with other characters.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233253,"byte_end":233290,"line_start":340,"line_end":340,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233291,"byte_end":233294,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ (The `Option<char>` is not related to encoding. Instead, it is used in the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233295,"byte_end":233373,"line_start":342,"line_end":342,"column_start":1,"column_end":79}},{"value":"/ matching engines to represent the beginning and ending boundaries of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233374,"byte_end":233450,"line_start":343,"line_end":343,"column_start":1,"column_end":77}},{"value":"/ search text.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233451,"byte_end":233468,"line_start":344,"line_end":344,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233869,"byte_end":233876,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"pub fn is_none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"/ Returns true iff the character is absent.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233798,"byte_end":233843,"line_start":358,"line_end":358,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233848,"byte_end":233857,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234068,"byte_end":234076,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"pub fn len_utf8(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"/ Returns the length of the character's UTF-8 encoding.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233919,"byte_end":233976,"line_start":362,"line_end":362,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233981,"byte_end":233984,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ If the character is absent, then `0` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233989,"byte_end":234042,"line_start":364,"line_end":364,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234047,"byte_end":234056,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234299,"byte_end":234311,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"pub fn is_word_char(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[{"value":"/ Returns true iff the character is a word character.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234164,"byte_end":234219,"line_start":370,"line_end":370,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234224,"byte_end":234227,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If the character is absent, then false is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234232,"byte_end":234287,"line_start":372,"line_end":372,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234531,"byte_end":234543,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"pub fn is_word_byte(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[{"value":"/ Returns true iff the byte is a word byte.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234411,"byte_end":234456,"line_start":377,"line_end":377,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234461,"byte_end":234464,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ If the byte is absent, then false is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234469,"byte_end":234519,"line_start":379,"line_end":379,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1843},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236562,"byte_end":236577,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[{"value":"/ A prefix extracted from a compiled regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236288,"byte_end":236346,"line_start":25,"line_end":25,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236347,"byte_end":236350,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ A regex prefix is a set of literal strings that *must* be matched at the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236351,"byte_end":236427,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ beginning of a regex in order for the entire regex to match. Similarly","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236428,"byte_end":236502,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ for a regex suffix.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":236503,"byte_end":236526,"line_start":29,"line_end":29,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237537,"byte_end":237542,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[{"value":"/ Returns a matcher that never matches and never advances the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237455,"byte_end":237525,"line_start":59,"line_end":59,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237693,"byte_end":237701,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"pub fn prefixes(Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for literal prefixes from the given set.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237619,"byte_end":237681,"line_start":64,"line_end":64,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237894,"byte_end":237902,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"pub fn suffixes(Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for literal suffixes from the given set.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237820,"byte_end":237882,"line_start":70,"line_end":70,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238763,"byte_end":238771,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"pub fn complete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[{"value":"/ Returns true if all matches comprise the entire regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238373,"byte_end":238444,"line_start":86,"line_end":86,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238449,"byte_end":238452,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This does not necessarily mean that a literal match implies a match","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238457,"byte_end":238528,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ of the regular expression. For example, the regular expresison `^a`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238533,"byte_end":238604,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ is comprised of a single complete literal `a`, but the regular","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238609,"byte_end":238675,"line_start":90,"line_end":90,"column_start":5,"column_end":71}},{"value":"/ expression demands that it only match at the beginning of a string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238680,"byte_end":238751,"line_start":91,"line_end":91,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238967,"byte_end":238971,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"pub fn find(&Self, &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"/ Find the position of a literal in `haystack` if it exists.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238842,"byte_end":238904,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":238909,"byte_end":238926,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":239698,"byte_end":239708,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"pub fn find_start(&Self, &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[{"value":"/ Like find, except matches must start at index `0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":239632,"byte_end":239686,"line_start":113,"line_end":113,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":240096,"byte_end":240104,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"pub fn find_end(&Self, &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[{"value":"/ Like find, except matches must end at index `haystack.len()`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":240019,"byte_end":240084,"line_start":126,"line_end":126,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":240529,"byte_end":240533,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"pub fn iter(&Self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all literals to be matched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":240461,"byte_end":240517,"line_start":139,"line_end":139,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241255,"byte_end":241258,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"pub fn lcp(&Self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for the longest common prefix of this matcher.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241175,"byte_end":241243,"line_start":156,"line_end":156,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241393,"byte_end":241396,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"pub fn lcs(&Self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[{"value":"/ Returns a matcher for the longest common suffix of this matcher.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241313,"byte_end":241381,"line_start":161,"line_end":161,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241505,"byte_end":241513,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[{"value":"/ Returns true iff this prefix is empty.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241451,"byte_end":241493,"line_start":166,"line_end":166,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241629,"byte_end":241632,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[{"value":"/ Returns the number of prefixes in this machine.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":241566,"byte_end":241617,"line_start":171,"line_end":171,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242084,"byte_end":242100,"line_start":186,"line_end":186,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"pub fn approximate_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[{"value":"/ Return the approximate heap usage of literals in bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242013,"byte_end":242072,"line_start":185,"line_end":185,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":686},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245498,"byte_end":245503,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":688},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245509,"byte_end":245514,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":691},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245530,"byte_end":245536,"line_start":274,"line_end":274,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":694},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245552,"byte_end":245554,"line_start":275,"line_end":275,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":697},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245575,"byte_end":245585,"line_start":276,"line_end":276,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":700},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245606,"byte_end":245615,"line_start":277,"line_end":277,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":684},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":684},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245476,"byte_end":245487,"line_start":271,"line_end":271,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"pub enum LiteralIter<'a> {\n    Empty,\n    Bytes(&'a [u8]),\n    Single(&'a [u8]),\n    AC(&'a [Literal]),\n    TeddySSSE3(&'a [Vec<u8>]),\n    TeddyAVX2(&'a [Vec<u8>]),\n}","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1886},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":250215,"byte_end":250226,"line_start":426,"line_end":426,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[{"value":"/ Provides an implementation of fast subtring search using frequency","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249605,"byte_end":249675,"line_start":415,"line_end":415,"column_start":1,"column_end":71}},{"value":"/ analysis.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249676,"byte_end":249689,"line_start":416,"line_end":416,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249690,"byte_end":249693,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ memchr is so fast that we do everything we can to keep the loop in memchr","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249694,"byte_end":249771,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"/ for as long as possible. The easiest way to do this is to intelligently","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249772,"byte_end":249847,"line_start":419,"line_end":419,"column_start":1,"column_end":76}},{"value":"/ pick the byte to send to memchr. The best byte is the byte that occurs","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249848,"byte_end":249922,"line_start":420,"line_end":420,"column_start":1,"column_end":75}},{"value":"/ least frequently in the haystack. Since doing frequency analysis on the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249923,"byte_end":249998,"line_start":421,"line_end":421,"column_start":1,"column_end":76}},{"value":"/ haystack is far too expensive, we compute a set of fixed frequencies up","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":249999,"byte_end":250074,"line_start":422,"line_end":422,"column_start":1,"column_end":76}},{"value":"/ front and hard code them in src/freqs.rs. Frequency analysis is done via","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":250075,"byte_end":250151,"line_start":423,"line_end":423,"column_start":1,"column_end":77}},{"value":"/ scripts/frequencies.py.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":250152,"byte_end":250179,"line_start":424,"line_end":424,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":252669,"byte_end":252673,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"pub fn find(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":252611,"byte_end":252628,"line_start":501,"line_end":501,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253501,"byte_end":253510,"line_start":528,"line_end":528,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"pub fn is_suffix(&Self, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253443,"byte_end":253460,"line_start":527,"line_end":527,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253685,"byte_end":253688,"line_start":535,"line_end":535,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":253748,"byte_end":253756,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"pub fn char_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1944},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290782,"byte_end":290789,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[{"value":"/ Program is a sequence of instructions and various facts about thos","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290665,"byte_end":290735,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ instructions.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290736,"byte_end":290753,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":1945},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290859,"byte_end":290864,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[{"value":"/ A sequence of instructions that represents an NFA.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290796,"byte_end":290850,"line_start":19,"line_end":19,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1946},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291029,"byte_end":291036,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[{"value":"/ Pointers to each Match instruction in the sequence.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290881,"byte_end":290936,"line_start":21,"line_end":21,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290941,"byte_end":290944,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This is always length 1 unless this program represents a regex set.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":290949,"byte_end":291020,"line_start":23,"line_end":23,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291170,"byte_end":291178,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[{"value":"/ The ordered sequence of all capture groups extracted from the AST.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291056,"byte_end":291126,"line_start":25,"line_end":25,"column_start":5,"column_end":75}},{"value":"/ Unnamed groups are `None`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291131,"byte_end":291161,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1948},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291271,"byte_end":291287,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[{"value":"/ Pointers to all named capture groups into `captures`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291205,"byte_end":291262,"line_start":28,"line_end":28,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291644,"byte_end":291649,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[{"value":"/ A pointer to the start instruction. This can vary depending on how","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291322,"byte_end":291392,"line_start":30,"line_end":30,"column_start":5,"column_end":75}},{"value":"/ the program was compiled. For example, programs for use with the DFA","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291397,"byte_end":291469,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ engine have a `.*?` inserted at the beginning of unanchored regular","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291474,"byte_end":291545,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ expressions. The actual starting point of the program is after the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291550,"byte_end":291620,"line_start":33,"line_end":33,"column_start":5,"column_end":75}},{"value":"/ `.*?`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291625,"byte_end":291635,"line_start":34,"line_end":34,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":1950},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291763,"byte_end":291775,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[{"value":"/ A set of equivalence classes for discriminating bytes in the compiled","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291664,"byte_end":291737,"line_start":36,"line_end":36,"column_start":5,"column_end":78}},{"value":"/ program.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291742,"byte_end":291754,"line_start":37,"line_end":37,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":1951},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291854,"byte_end":291863,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[{"value":"/ When true, this program can only match valid UTF-8.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291790,"byte_end":291845,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1952},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291987,"byte_end":291995,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[{"value":"/ When true, this program uses byte range instructions instead of Unicode","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291875,"byte_end":291950,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ range instructions.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":291955,"byte_end":291978,"line_start":42,"line_end":42,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1953},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292184,"byte_end":292190,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[{"value":"/ When true, the program is compiled for DFA matching. For example, this","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292007,"byte_end":292081,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ implies `is_bytes` and also inserts a preceding `.*?` for unanchored","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292086,"byte_end":292158,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ regexes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292163,"byte_end":292175,"line_start":46,"line_end":46,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":1954},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292296,"byte_end":292306,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[{"value":"/ When true, the program matches text in reverse (for use only in the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292202,"byte_end":292273,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ DFA).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292278,"byte_end":292287,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":1955},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292388,"byte_end":292405,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[{"value":"/ Whether the regex must match from the start of the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292318,"byte_end":292379,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1956},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292483,"byte_end":292498,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[{"value":"/ Whether the regex must match at the end of the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292417,"byte_end":292474,"line_start":53,"line_end":53,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":1957},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292589,"byte_end":292614,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[{"value":"/ Whether this program contains a Unicode word boundary instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292510,"byte_end":292580,"line_start":55,"line_end":55,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292706,"byte_end":292714,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[{"value":"/ A possibly empty machine for very quickly matching prefix literals.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292626,"byte_end":292697,"line_start":57,"line_end":57,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293541,"byte_end":293555,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[{"value":"/ A limit on the size of the cache that the DFA is allowed to use while","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292737,"byte_end":292810,"line_start":59,"line_end":59,"column_start":5,"column_end":78}},{"value":"/ matching.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292815,"byte_end":292828,"line_start":60,"line_end":60,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292833,"byte_end":292836,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The cache limit specifies approximately how much space we're willing to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292841,"byte_end":292916,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ give to the state cache. Once the state cache exceeds the size, it is","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292921,"byte_end":292994,"line_start":63,"line_end":63,"column_start":5,"column_end":78}},{"value":"/ wiped and all states must be re-computed.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":292999,"byte_end":293044,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293049,"byte_end":293052,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Note that this value does not impact correctness. It can be set to 0","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293057,"byte_end":293129,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ and the DFA will run just fine. (It will only ever store exactly one","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293134,"byte_end":293206,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ state in the cache, and will likely run very slowly, but it will work.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293211,"byte_end":293286,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293291,"byte_end":293294,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Also note that this limit is *per thread of execution*. That is,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293299,"byte_end":293367,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ if the same regex is used to search text across multiple threads","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293372,"byte_end":293440,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ simultaneously, then the DFA cache is not shared. Instead, copies are","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293445,"byte_end":293518,"line_start":72,"line_end":72,"column_start":5,"column_end":78}},{"value":"/ made.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293523,"byte_end":293532,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293681,"byte_end":293684,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[{"value":"/ Creates an empty instruction sequence. Fields are given default","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293586,"byte_end":293653,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/ values.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293658,"byte_end":293669,"line_start":79,"line_end":79,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":294399,"byte_end":294403,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"pub fn skip(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[{"value":"/ If pc is an index to a no-op instruction (like Save), then return the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":294265,"byte_end":294338,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ next pc that is not a no-op instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":294343,"byte_end":294387,"line_start":101,"line_end":101,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":294717,"byte_end":294731,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"pub fn leads_to_match(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[{"value":"/ Return true if and only if an execution engine at instruction `pc` will","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":294598,"byte_end":294673,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ always lead to a match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":294678,"byte_end":294705,"line_start":112,"line_end":112,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295257,"byte_end":295270,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"pub fn needs_dotstar(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[{"value":"/ Returns true if the current configuration demands that an implicit","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295119,"byte_end":295189,"line_start":126,"line_end":126,"column_start":5,"column_end":75}},{"value":"/ `.*?` be prepended to the instruction sequence.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295194,"byte_end":295245,"line_start":127,"line_end":127,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295477,"byte_end":295487,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"pub fn uses_bytes(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[{"value":"/ Returns true if this program uses Byte instructions instead of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295366,"byte_end":295432,"line_start":132,"line_end":132,"column_start":5,"column_end":71}},{"value":"/ Char/Range instructions.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295437,"byte_end":295465,"line_start":133,"line_end":133,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295722,"byte_end":295731,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"pub fn only_utf8(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ Returns true if this program exclusively matches valid UTF-8 bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295553,"byte_end":295624,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295629,"byte_end":295632,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ That is, if an invalid UTF-8 byte is seen, then no match is possible.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295637,"byte_end":295710,"line_start":140,"line_end":140,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295879,"byte_end":295895,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"pub fn approximate_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[{"value":"/ Return the approximate heap usage of this instruction sequence in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295783,"byte_end":295852,"line_start":145,"line_end":145,"column_start":5,"column_end":74}},{"value":"/ bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":295857,"byte_end":295867,"line_start":146,"line_end":146,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1963},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300597,"byte_end":300602,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[{"value":"/ Match indicates that the program has reached a match state.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300179,"byte_end":300242,"line_start":260,"line_end":260,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300247,"byte_end":300250,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The number in the match corresponds to the Nth logical regular","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300255,"byte_end":300321,"line_start":262,"line_end":262,"column_start":5,"column_end":71}},{"value":"/ expression in this program. This index is always 0 for normal regex","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300326,"byte_end":300397,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ programs. Values greater than 0 appear when compiling regex sets, and","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300402,"byte_end":300475,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ each match instruction gets its own unique value. The value corresponds","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300480,"byte_end":300555,"line_start":265,"line_end":265,"column_start":5,"column_end":80}},{"value":"/ to the Nth regex in the set.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300560,"byte_end":300592,"line_start":266,"line_end":266,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300732,"byte_end":300736,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[{"value":"/ Save causes the program to save the current location of the input in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300615,"byte_end":300687,"line_start":268,"line_end":268,"column_start":5,"column_end":77}},{"value":"/ the slot indicated by InstSave.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300692,"byte_end":300727,"line_start":269,"line_end":269,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300871,"byte_end":300876,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[{"value":"/ Split causes the program to diverge to one of two paths in the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300752,"byte_end":300818,"line_start":271,"line_end":271,"column_start":5,"column_end":71}},{"value":"/ program, preferring goto1 in InstSplit.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300823,"byte_end":300866,"line_start":272,"line_end":272,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301036,"byte_end":301045,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[{"value":"/ EmptyLook represents a zero-width assertion in a regex program. A","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300893,"byte_end":300962,"line_start":274,"line_end":274,"column_start":5,"column_end":74}},{"value":"/ zero-width assertion does not consume any of the input text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300967,"byte_end":301031,"line_start":275,"line_end":275,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301187,"byte_end":301191,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[{"value":"/ Char requires the regex program to match the character in InstChar at","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301066,"byte_end":301139,"line_start":277,"line_end":277,"column_start":5,"column_end":78}},{"value":"/ the current position in the input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301144,"byte_end":301182,"line_start":278,"line_end":278,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1978},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301365,"byte_end":301371,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[{"value":"/ Ranges requires the regex program to match the character at the current","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301207,"byte_end":301282,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/ position in the input with one of the ranges specified in InstRanges.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301287,"byte_end":301360,"line_start":281,"line_end":281,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301569,"byte_end":301574,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[{"value":"/ Bytes is like Ranges, except it expresses a single byte range. It is","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301389,"byte_end":301461,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/ used in conjunction with Split instructions to implement multi-byte","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301466,"byte_end":301537,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/ character classes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301542,"byte_end":301564,"line_start":285,"line_end":285,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300168,"byte_end":300172,"line_start":259,"line_end":259,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"pub enum Inst {\n\n    /// Match indicates that the program has reached a match state.\n    ///\n    /// The number in the match corresponds to the Nth logical regular\n    /// expression in this program. This index is always 0 for normal regex\n    /// programs. Values greater than 0 appear when compiling regex sets, and\n    /// each match instruction gets its own unique value. The value corresponds\n    /// to the Nth regex in the set.\n    Match(usize),\n\n    /// Save causes the program to save the current location of the input in\n    /// the slot indicated by InstSave.\n    Save(InstSave),\n\n    /// Split causes the program to diverge to one of two paths in the\n    /// program, preferring goto1 in InstSplit.\n    Split(InstSplit),\n\n    /// EmptyLook represents a zero-width assertion in a regex program. A\n    /// zero-width assertion does not consume any of the input text.\n    EmptyLook(InstEmptyLook),\n\n    /// Char requires the regex program to match the character in InstChar at\n    /// the current position in the input.\n    Char(InstChar),\n\n    /// Ranges requires the regex program to match the character at the current\n    /// position in the input with one of the ranges specified in InstRanges.\n    Ranges(InstRanges),\n\n    /// Bytes is like Ranges, except it expresses a single byte range. It is\n    /// used in conjunction with Split instructions to implement multi-byte\n    /// character classes.\n    Bytes(InstBytes),\n}","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[{"value":"/ Inst is an instruction code in a Regex program.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299183,"byte_end":299234,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299235,"byte_end":299238,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ Regrettably, a regex program either contains Unicode codepoint","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299239,"byte_end":299305,"line_start":243,"line_end":243,"column_start":1,"column_end":67}},{"value":"/ instructions (Char and Ranges) or it contains byte instructions (Bytes).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299306,"byte_end":299382,"line_start":244,"line_end":244,"column_start":1,"column_end":77}},{"value":"/ A regex program can never contain both.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299383,"byte_end":299426,"line_start":245,"line_end":245,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299427,"byte_end":299430,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ It would be worth investigating splitting this into two distinct types and","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299431,"byte_end":299509,"line_start":247,"line_end":247,"column_start":1,"column_end":79}},{"value":"/ then figuring out how to make the matching engines polymorphic over those","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299510,"byte_end":299587,"line_start":248,"line_end":248,"column_start":1,"column_end":78}},{"value":"/ types without sacrificing performance.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299588,"byte_end":299630,"line_start":249,"line_end":249,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299631,"byte_end":299634,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Other than the benefit of moving invariants into the type system, another","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299635,"byte_end":299712,"line_start":251,"line_end":251,"column_start":1,"column_end":78}},{"value":"/ benefit is the decreased size. If we remove the `Char` and `Ranges`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299713,"byte_end":299784,"line_start":252,"line_end":252,"column_start":1,"column_end":72}},{"value":"/ instructions from the `Inst` enum, then its size shrinks from 40 bytes to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299785,"byte_end":299862,"line_start":253,"line_end":253,"column_start":1,"column_end":78}},{"value":"/ 24 bytes. (This is because of the removal of a `Vec` in the `Ranges`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299863,"byte_end":299935,"line_start":254,"line_end":254,"column_start":1,"column_end":73}},{"value":"/ variant.) Given that byte based machines are typically much bigger than","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":299936,"byte_end":300011,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ their Unicode analogues (because they can decode UTF-8 directly), this ends","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300012,"byte_end":300091,"line_start":256,"line_end":256,"column_start":1,"column_end":80}},{"value":"/ up being a pretty significant savings.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":300092,"byte_end":300134,"line_start":257,"line_end":257,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301678,"byte_end":301686,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"pub fn is_match(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this is a match instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301606,"byte_end":301666,"line_start":290,"line_end":290,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1988},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301884,"byte_end":301892,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1990}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Save instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301805,"byte_end":301848,"line_start":299,"line_end":299,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1989},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301956,"byte_end":301960,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":1988},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301899,"byte_end":301947,"line_start":302,"line_end":302,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1990},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302115,"byte_end":302119,"line_start":306,"line_end":306,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":1988},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[{"value":"/ The capture slot (there are two slots for every capture in a regex,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301975,"byte_end":302046,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/ including the zeroth capture for the entire match).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302051,"byte_end":302106,"line_start":305,"line_end":305,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1995},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302211,"byte_end":302220,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Split instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302131,"byte_end":302175,"line_start":309,"line_end":309,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1996},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302376,"byte_end":302381,"line_start":314,"line_end":314,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":1995},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[{"value":"/ The first instruction to try. A match resulting from following goto1","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302227,"byte_end":302299,"line_start":312,"line_end":312,"column_start":5,"column_end":77}},{"value":"/ has precedence over a match resulting from following goto2.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302304,"byte_end":302367,"line_start":313,"line_end":313,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":1997},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302546,"byte_end":302551,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":1995},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[{"value":"/ The second instruction to try. A match resulting from following goto1","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302396,"byte_end":302469,"line_start":315,"line_end":315,"column_start":5,"column_end":78}},{"value":"/ has precedence over a match resulting from following goto2.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302474,"byte_end":302537,"line_start":316,"line_end":316,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302651,"byte_end":302664,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":2003},{"krate":0,"index":2004}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the `EmptyLook` instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302565,"byte_end":302615,"line_start":320,"line_end":320,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2003},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302765,"byte_end":302769,"line_start":325,"line_end":325,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2002},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302671,"byte_end":302738,"line_start":323,"line_end":323,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302743,"byte_end":302756,"line_start":324,"line_end":324,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2004},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302839,"byte_end":302843,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2002},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[{"value":"/ The type of zero-width assertion to check.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302784,"byte_end":302830,"line_start":326,"line_end":326,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2010},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303007,"byte_end":303016,"line_start":334,"line_end":334,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[{"value":"/ Start of line or input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302975,"byte_end":303002,"line_start":333,"line_end":333,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2012},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303052,"byte_end":303059,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[{"value":"/ End of line or input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303022,"byte_end":303047,"line_start":335,"line_end":335,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303089,"byte_end":303098,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[{"value":"/ Start of input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303065,"byte_end":303084,"line_start":337,"line_end":337,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2016},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303126,"byte_end":303133,"line_start":340,"line_end":340,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[{"value":"/ End of input.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303104,"byte_end":303121,"line_start":339,"line_end":339,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2018},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303207,"byte_end":303219,"line_start":342,"line_end":342,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[{"value":"/ Word character on one side and non-word character on other.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303139,"byte_end":303202,"line_start":341,"line_end":341,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2020},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303299,"byte_end":303314,"line_start":344,"line_end":344,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[{"value":"/ Word character on both sides or non-word character on both sides.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303225,"byte_end":303294,"line_start":343,"line_end":343,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2022},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303349,"byte_end":303366,"line_start":346,"line_end":346,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[{"value":"/ ASCII word boundary.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303320,"byte_end":303344,"line_start":345,"line_end":345,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2024},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303405,"byte_end":303425,"line_start":348,"line_end":348,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2009},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[{"value":"/ Not ASCII word boundary.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303372,"byte_end":303400,"line_start":347,"line_end":347,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":2009},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302959,"byte_end":302968,"line_start":332,"line_end":332,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"pub enum EmptyLook {\n\n    /// Start of line or input.\n    StartLine,\n\n    /// End of line or input.\n    EndLine,\n\n    /// Start of input.\n    StartText,\n\n    /// End of input.\n    EndText,\n\n    /// Word character on one side and non-word character on other.\n    WordBoundary,\n\n    /// Word character on both sides or non-word character on both sides.\n    NotWordBoundary,\n\n    /// ASCII word boundary.\n    WordBoundaryAscii,\n\n    /// Not ASCII word boundary.\n    NotWordBoundaryAscii,\n}","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022},{"krate":0,"index":2024}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"/ The set of zero-width match instructions.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":302859,"byte_end":302904,"line_start":330,"line_end":330,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2037},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303509,"byte_end":303517,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2039}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Char instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303430,"byte_end":303473,"line_start":351,"line_end":351,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2038},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303618,"byte_end":303622,"line_start":356,"line_end":356,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2037},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303524,"byte_end":303591,"line_start":354,"line_end":354,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303596,"byte_end":303609,"line_start":355,"line_end":355,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2039},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303672,"byte_end":303673,"line_start":358,"line_end":358,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2037},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[{"value":"/ The character to test.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303637,"byte_end":303663,"line_start":357,"line_end":357,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2044},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303765,"byte_end":303775,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2045},{"krate":0,"index":2046}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Ranges instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303684,"byte_end":303729,"line_start":361,"line_end":361,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2045},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303876,"byte_end":303880,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303782,"byte_end":303849,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303854,"byte_end":303867,"line_start":365,"line_end":365,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2046},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303955,"byte_end":303961,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[{"value":"/ The set of Unicode scalar value ranges to test.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303895,"byte_end":303946,"line_start":367,"line_end":367,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":304088,"byte_end":304095,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"pub fn matches(&Self, Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[{"value":"/ Tests whether the given input character matches this instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":304007,"byte_end":304076,"line_start":372,"line_end":372,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":304881,"byte_end":304890,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"pub fn num_chars(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[{"value":"/ Return the number of distinct characters represented by all of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":304783,"byte_end":304853,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ ranges.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":304858,"byte_end":304869,"line_start":397,"line_end":397,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2051},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305145,"byte_end":305154,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[{"value":"/ Representation of the Bytes instruction.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305065,"byte_end":305109,"line_start":406,"line_end":406,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2052},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305255,"byte_end":305259,"line_start":411,"line_end":411,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2051},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[{"value":"/ The next location to execute in the program if this instruction","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305161,"byte_end":305228,"line_start":409,"line_end":409,"column_start":5,"column_end":72}},{"value":"/ succeeds.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305233,"byte_end":305246,"line_start":410,"line_end":410,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2053},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305328,"byte_end":305333,"line_start":413,"line_end":413,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2051},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[{"value":"/ The start (inclusive) of this byte range.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305274,"byte_end":305319,"line_start":412,"line_end":412,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305395,"byte_end":305398,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2051},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[{"value":"/ The end (inclusive) of this byte range.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305343,"byte_end":305386,"line_start":414,"line_end":414,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305504,"byte_end":305511,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"pub fn matches(&Self, u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given byte is in this range.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305428,"byte_end":305492,"line_start":419,"line_end":419,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2059},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306202,"byte_end":306214,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"/ The set of user configurable options for compiling zero or more regexes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306067,"byte_end":306143,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306168,"byte_end":306190,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2060},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306225,"byte_end":306229,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2061},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306252,"byte_end":306262,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2062},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306279,"byte_end":306293,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2063},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306310,"byte_end":306320,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2064},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306335,"byte_end":306351,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2065},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306367,"byte_end":306377,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2066},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306393,"byte_end":306413,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2067},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306429,"byte_end":306439,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2068},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306455,"byte_end":306472,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2069},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306488,"byte_end":306495,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2070},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306511,"byte_end":306516,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2059},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2163},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321641,"byte_end":321646,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"/ Match represents a single match of a regex in a haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321443,"byte_end":321504,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321505,"byte_end":321508,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'t` refers to the lifetime of the matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321509,"byte_end":321584,"line_start":28,"line_end":28,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321827,"byte_end":321832,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"pub fn start(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the starting byte offset of the match in the haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321735,"byte_end":321801,"line_start":37,"line_end":37,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321806,"byte_end":321815,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321971,"byte_end":321974,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"pub fn end(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the ending byte offset of the match in the haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321881,"byte_end":321945,"line_start":43,"line_end":43,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321950,"byte_end":321959,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322076,"byte_end":322084,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"pub fn as_bytes(&Self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"/ Returns the matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322021,"byte_end":322050,"line_start":49,"line_end":49,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322055,"byte_end":322064,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2187},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323098,"byte_end":323103,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[{"value":"/ A compiled regular expression for matching arbitrary bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322421,"byte_end":322484,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322485,"byte_end":322488,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ It can be used to search, split or replace text. All searching is done with","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322489,"byte_end":322568,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/ an implicit `.*?` at the beginning and end of an expression. To force an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322569,"byte_end":322645,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/ expression to match the whole string (or a prefix or a suffix), you must","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322646,"byte_end":322722,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ use an anchor like `^` or `$` (or `\\A` and `\\z`).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322723,"byte_end":322776,"line_start":71,"line_end":71,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322777,"byte_end":322780,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Like the `Regex` type in the parent module, matches with this regex return","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322781,"byte_end":322859,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ byte offsets into the search text. **Unlike** the parent `Regex` type,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322860,"byte_end":322934,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/ these byte offsets may not correspond to UTF-8 sequence boundaries since","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":322935,"byte_end":323011,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ the regexes in this module can match arbitrary bytes.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323012,"byte_end":323069,"line_start":76,"line_end":76,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324162,"byte_end":324165,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"pub fn new(&str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[{"value":"/ Compiles a regular expression. Once compiled, it can be used repeatedly","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323943,"byte_end":324018,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ to search, split or replace text in a string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324023,"byte_end":324072,"line_start":116,"line_end":116,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324077,"byte_end":324080,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ If an invalid expression is given, then an error is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324085,"byte_end":324150,"line_start":118,"line_end":118,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324896,"byte_end":324904,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"pub fn is_match(&Self, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[{"value":"/ Returns true if and only if the regex matches the string given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324251,"byte_end":324318,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324323,"byte_end":324326,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ It is recommended to use this method if all you need to do is test","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324331,"byte_end":324401,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ a match, since the underlying matching engine may be able to do less","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324406,"byte_end":324478,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ work.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324483,"byte_end":324492,"line_start":127,"line_end":127,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324497,"byte_end":324500,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324505,"byte_end":324518,"line_start":129,"line_end":129,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324523,"byte_end":324526,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Test if some text contains at least one word with exactly 13 ASCII word","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324531,"byte_end":324606,"line_start":131,"line_end":131,"column_start":5,"column_end":80}},{"value":"/ bytes:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324611,"byte_end":324621,"line_start":132,"line_end":132,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324626,"byte_end":324629,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324634,"byte_end":324645,"line_start":134,"line_end":134,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324650,"byte_end":324700,"line_start":135,"line_end":135,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324705,"byte_end":324722,"line_start":136,"line_end":136,"column_start":5,"column_end":22}},{"value":"/ let text = b\"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324727,"byte_end":324792,"line_start":137,"line_end":137,"column_start":5,"column_end":70}},{"value":"/ assert!(Regex::new(r\"\\b\\w{13}\\b\").unwrap().is_match(text));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324797,"byte_end":324860,"line_start":138,"line_end":138,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324865,"byte_end":324872,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324877,"byte_end":324884,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325766,"byte_end":325770,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"pub fn find<'t>(&Self, &'t [u8]) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the start and end byte range of the leftmost-first match in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":324980,"byte_end":325051,"line_start":145,"line_end":145,"column_start":5,"column_end":76}},{"value":"/ `text`. If no match exists, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325056,"byte_end":325112,"line_start":146,"line_end":146,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325117,"byte_end":325120,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that this should only be used if you want to discover the position","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325125,"byte_end":325200,"line_start":148,"line_end":148,"column_start":5,"column_end":80}},{"value":"/ of the match. Testing the existence of a match is faster if you use","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325205,"byte_end":325276,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/ `is_match`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325281,"byte_end":325296,"line_start":150,"line_end":150,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325301,"byte_end":325304,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325309,"byte_end":325322,"line_start":152,"line_end":152,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325327,"byte_end":325330,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of the first word with exactly 13","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325335,"byte_end":325404,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/ ASCII word bytes:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325409,"byte_end":325430,"line_start":155,"line_end":155,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325435,"byte_end":325438,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325443,"byte_end":325454,"line_start":157,"line_end":157,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325459,"byte_end":325509,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325514,"byte_end":325531,"line_start":159,"line_end":159,"column_start":5,"column_end":22}},{"value":"/ let text = b\"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325536,"byte_end":325601,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"/ let mat = Regex::new(r\"\\b\\w{13}\\b\").unwrap().find(text).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325606,"byte_end":325675,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"/ assert_eq!((mat.start(), mat.end()), (2, 15));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325680,"byte_end":325730,"line_start":162,"line_end":162,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325735,"byte_end":325742,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325747,"byte_end":325754,"line_start":164,"line_end":164,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326486,"byte_end":326495,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"pub fn find_iter<'r, 't>(&'r Self, &'t [u8]) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[{"value":"/ Returns an iterator for each successive non-overlapping match in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325862,"byte_end":325930,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ `text`, returning the start and end byte indices with respect to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":325935,"byte_end":326003,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"/ `text`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326008,"byte_end":326019,"line_start":171,"line_end":171,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326024,"byte_end":326027,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326032,"byte_end":326045,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326050,"byte_end":326053,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of every word with exactly 13 ASCII","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326058,"byte_end":326129,"line_start":175,"line_end":175,"column_start":5,"column_end":76}},{"value":"/ word bytes:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326134,"byte_end":326149,"line_start":176,"line_end":176,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326154,"byte_end":326157,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326162,"byte_end":326173,"line_start":178,"line_end":178,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326178,"byte_end":326228,"line_start":179,"line_end":179,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326233,"byte_end":326250,"line_start":180,"line_end":180,"column_start":5,"column_end":22}},{"value":"/ let text = b\"Retroactively relinquishing remunerations is reprehensible.\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326255,"byte_end":326333,"line_start":181,"line_end":181,"column_start":5,"column_end":83}},{"value":"/ for mat in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326338,"byte_end":326405,"line_start":182,"line_end":182,"column_start":5,"column_end":72}},{"value":"/     println!(\"{:?}\", mat);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326410,"byte_end":326440,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326445,"byte_end":326450,"line_start":184,"line_end":184,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326455,"byte_end":326462,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326467,"byte_end":326474,"line_start":186,"line_end":186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329632,"byte_end":329640,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"pub fn captures<'t>(&Self, &'t [u8]) -> Option<Captures>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the capture groups corresponding to the leftmost-first","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326613,"byte_end":326679,"line_start":191,"line_end":191,"column_start":5,"column_end":71}},{"value":"/ match in `text`. Capture group `0` always corresponds to the entire","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326684,"byte_end":326755,"line_start":192,"line_end":192,"column_start":5,"column_end":76}},{"value":"/ match. If no match is found, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326760,"byte_end":326817,"line_start":193,"line_end":193,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326822,"byte_end":326825,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ You should only use `captures` if you need access to the location of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326830,"byte_end":326902,"line_start":195,"line_end":195,"column_start":5,"column_end":77}},{"value":"/ capturing group matches. Otherwise, `find` is faster for discovering","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326907,"byte_end":326979,"line_start":196,"line_end":196,"column_start":5,"column_end":77}},{"value":"/ the location of the overall match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":326984,"byte_end":327022,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327027,"byte_end":327030,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327035,"byte_end":327049,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327054,"byte_end":327057,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Say you have some text with movie names and their release years,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327062,"byte_end":327130,"line_start":201,"line_end":201,"column_start":5,"column_end":73}},{"value":"/ like \"'Citizen Kane' (1941)\". It'd be nice if we could search for text","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327135,"byte_end":327209,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ looking like that, while also extracting the movie name and its release","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327214,"byte_end":327289,"line_start":203,"line_end":203,"column_start":5,"column_end":80}},{"value":"/ year separately.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327294,"byte_end":327314,"line_start":204,"line_end":204,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327319,"byte_end":327322,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327327,"byte_end":327338,"line_start":206,"line_end":206,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327343,"byte_end":327393,"line_start":207,"line_end":207,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327398,"byte_end":327415,"line_start":208,"line_end":208,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327420,"byte_end":327481,"line_start":209,"line_end":209,"column_start":5,"column_end":66}},{"value":"/ let text = b\"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327486,"byte_end":327550,"line_start":210,"line_end":210,"column_start":5,"column_end":69}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327555,"byte_end":327597,"line_start":211,"line_end":211,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.get(1).unwrap().as_bytes(), &b\"Citizen Kane\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327602,"byte_end":327672,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(caps.get(2).unwrap().as_bytes(), &b\"1941\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327677,"byte_end":327739,"line_start":213,"line_end":213,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_bytes(), &b\"'Citizen Kane' (1941)\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327744,"byte_end":327823,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/ // You can also access the groups by index using the Index notation.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327828,"byte_end":327900,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ // Note that this will panic on an invalid index.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327905,"byte_end":327958,"line_start":216,"line_end":216,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(&caps[1], b\"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":327963,"byte_end":328005,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(&caps[2], b\"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328010,"byte_end":328044,"line_start":218,"line_end":218,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328049,"byte_end":328100,"line_start":219,"line_end":219,"column_start":5,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328105,"byte_end":328112,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328117,"byte_end":328124,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328129,"byte_end":328132,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note that the full match is at capture group `0`. Each subsequent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328137,"byte_end":328206,"line_start":223,"line_end":223,"column_start":5,"column_end":74}},{"value":"/ capture group is indexed by the order of its opening `(`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328211,"byte_end":328272,"line_start":224,"line_end":224,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328277,"byte_end":328280,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ We can make this example a bit clearer by using *named* capture groups:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328285,"byte_end":328360,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328365,"byte_end":328368,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328373,"byte_end":328384,"line_start":228,"line_end":228,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328389,"byte_end":328439,"line_start":229,"line_end":229,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328444,"byte_end":328461,"line_start":230,"line_end":230,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328466,"byte_end":328534,"line_start":231,"line_end":231,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328539,"byte_end":328568,"line_start":232,"line_end":232,"column_start":5,"column_end":34}},{"value":"/ let text = b\"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328573,"byte_end":328637,"line_start":233,"line_end":233,"column_start":5,"column_end":69}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328642,"byte_end":328684,"line_start":234,"line_end":234,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.name(\"title\").unwrap().as_bytes(), b\"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328689,"byte_end":328761,"line_start":235,"line_end":235,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(caps.name(\"year\").unwrap().as_bytes(), b\"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328766,"byte_end":328829,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_bytes(), &b\"'Citizen Kane' (1941)\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328834,"byte_end":328913,"line_start":237,"line_end":237,"column_start":5,"column_end":84}},{"value":"/ // You can also access the groups by name using the Index notation.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328918,"byte_end":328989,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ // Note that this will panic on an invalid group name.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":328994,"byte_end":329052,"line_start":239,"line_end":239,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(&caps[\"title\"], b\"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329057,"byte_end":329105,"line_start":240,"line_end":240,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(&caps[\"year\"], b\"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329110,"byte_end":329149,"line_start":241,"line_end":241,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329154,"byte_end":329205,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329210,"byte_end":329213,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329218,"byte_end":329225,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329230,"byte_end":329237,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329242,"byte_end":329245,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Here we name the capture groups, which we can access with the `name`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329250,"byte_end":329322,"line_start":247,"line_end":247,"column_start":5,"column_end":77}},{"value":"/ method or the `Index` notation with a `&str`. Note that the named","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329327,"byte_end":329396,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ capture groups are still accessible with `get` or the `Index` notation","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329401,"byte_end":329475,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ with a `usize`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329480,"byte_end":329499,"line_start":250,"line_end":250,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329504,"byte_end":329507,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ The `0`th capture group is always unnamed, so it must always be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329512,"byte_end":329579,"line_start":252,"line_end":252,"column_start":5,"column_end":72}},{"value":"/ accessed with `get(0)` or `[0]`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329584,"byte_end":329620,"line_start":253,"line_end":253,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331085,"byte_end":331098,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"pub fn captures_iter<'r, 't>(&'r Self, &'t [u8]) -> CaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[{"value":"/ Returns an iterator over all the non-overlapping capture groups matched","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":329950,"byte_end":330025,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ in `text`. This is operationally the same as `find_iter`, except it","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330030,"byte_end":330101,"line_start":264,"line_end":264,"column_start":5,"column_end":76}},{"value":"/ yields information about capturing group matches.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330106,"byte_end":330159,"line_start":265,"line_end":265,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330164,"byte_end":330167,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330172,"byte_end":330185,"line_start":267,"line_end":267,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330190,"byte_end":330193,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ We can use this to find all movie titles and their release years in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330198,"byte_end":330269,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/ some text, where the movie is formatted like \"'Title' (xxxx)\":","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330274,"byte_end":330340,"line_start":270,"line_end":270,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330345,"byte_end":330348,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330353,"byte_end":330364,"line_start":272,"line_end":272,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use std::str; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330369,"byte_end":330433,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330438,"byte_end":330455,"line_start":274,"line_end":274,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330460,"byte_end":330528,"line_start":275,"line_end":275,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330533,"byte_end":330562,"line_start":276,"line_end":276,"column_start":5,"column_end":34}},{"value":"/ let text = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330567,"byte_end":330647,"line_start":277,"line_end":277,"column_start":5,"column_end":85}},{"value":"/ for caps in re.captures_iter(text) {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330652,"byte_end":330692,"line_start":278,"line_end":278,"column_start":5,"column_end":45}},{"value":"/     let title = str::from_utf8(&caps[\"title\"]).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330697,"byte_end":330757,"line_start":279,"line_end":279,"column_start":5,"column_end":65}},{"value":"/     let year = str::from_utf8(&caps[\"year\"]).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330762,"byte_end":330820,"line_start":280,"line_end":280,"column_start":5,"column_end":63}},{"value":"/     println!(\"Movie: {:?}, Released: {:?}\", title, year);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330825,"byte_end":330886,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330891,"byte_end":330896,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/ // Output:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330901,"byte_end":330915,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/ // Movie: Citizen Kane, Released: 1941","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330920,"byte_end":330962,"line_start":284,"line_end":284,"column_start":5,"column_end":47}},{"value":"/ // Movie: The Wizard of Oz, Released: 1939","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":330967,"byte_end":331013,"line_start":285,"line_end":285,"column_start":5,"column_end":51}},{"value":"/ // Movie: M, Released: 1931","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331018,"byte_end":331049,"line_start":286,"line_end":286,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331054,"byte_end":331061,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331066,"byte_end":331073,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332016,"byte_end":332021,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"pub fn split<'r, 't>(&'r Self, &'t [u8]) -> Split","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[{"value":"/ Returns an iterator of substrings of `text` delimited by a match of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331257,"byte_end":331332,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ regular expression. Namely, each element of the iterator corresponds to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331337,"byte_end":331412,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ text that *isn't* matched by the regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331417,"byte_end":331473,"line_start":298,"line_end":298,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331478,"byte_end":331481,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331486,"byte_end":331533,"line_start":300,"line_end":300,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331538,"byte_end":331541,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331546,"byte_end":331559,"line_start":302,"line_end":302,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331564,"byte_end":331567,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ To split a string delimited by arbitrary amounts of spaces or tabs:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331572,"byte_end":331643,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331648,"byte_end":331651,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331656,"byte_end":331667,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331672,"byte_end":331722,"line_start":307,"line_end":307,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331727,"byte_end":331744,"line_start":308,"line_end":308,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"[ \\t]+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331749,"byte_end":331793,"line_start":309,"line_end":309,"column_start":5,"column_end":49}},{"value":"/ let fields: Vec<&[u8]> = re.split(b\"a b \\t  c\\td    e\").collect();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331798,"byte_end":331868,"line_start":310,"line_end":310,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(fields, vec![","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331873,"byte_end":331901,"line_start":311,"line_end":311,"column_start":5,"column_end":33}},{"value":"/     &b\"a\"[..], &b\"b\"[..], &b\"c\"[..], &b\"d\"[..], &b\"e\"[..],","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331906,"byte_end":331968,"line_start":312,"line_end":312,"column_start":5,"column_end":67}},{"value":"/ ]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331973,"byte_end":331980,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331985,"byte_end":331992,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":331997,"byte_end":332004,"line_start":315,"line_end":315,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333037,"byte_end":333043,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"pub fn splitn<'r, 't>(&'r Self, &'t [u8], usize) -> SplitN","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of `text` delimited","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332175,"byte_end":332248,"line_start":323,"line_end":323,"column_start":5,"column_end":78}},{"value":"/ by a match of the regular expression. (A `limit` of `0` will return no","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332253,"byte_end":332327,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/ substrings.) Namely, each element of the iterator corresponds to text","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332332,"byte_end":332405,"line_start":325,"line_end":325,"column_start":5,"column_end":78}},{"value":"/ that *isn't* matched by the regular expression. The remainder of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332410,"byte_end":332482,"line_start":326,"line_end":326,"column_start":5,"column_end":77}},{"value":"/ string that is not split will be the last element in the iterator.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332487,"byte_end":332557,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332562,"byte_end":332565,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332570,"byte_end":332617,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332622,"byte_end":332625,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332630,"byte_end":332643,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332648,"byte_end":332651,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Get the first two words in some text:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332656,"byte_end":332697,"line_start":333,"line_end":333,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332702,"byte_end":332705,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332710,"byte_end":332721,"line_start":335,"line_end":335,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332726,"byte_end":332776,"line_start":336,"line_end":336,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332781,"byte_end":332798,"line_start":337,"line_end":337,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"\\W+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332803,"byte_end":332844,"line_start":338,"line_end":338,"column_start":5,"column_end":46}},{"value":"/ let fields: Vec<&[u8]> = re.splitn(b\"Hey! How are you?\", 3).collect();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332849,"byte_end":332923,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(fields, vec![&b\"Hey\"[..], &b\"How\"[..], &b\"are you?\"[..]]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":332928,"byte_end":333001,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333006,"byte_end":333013,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333018,"byte_end":333025,"line_start":342,"line_end":342,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337826,"byte_end":337833,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"pub fn replace<'t, R: Replacer>(&Self, &'t [u8], R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[{"value":"/ Replaces the leftmost-first match with the replacement provided. The","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333241,"byte_end":333313,"line_start":354,"line_end":354,"column_start":5,"column_end":77}},{"value":"/ replacement can be a regular byte string (where `$N` and `$name` are","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333318,"byte_end":333390,"line_start":355,"line_end":355,"column_start":5,"column_end":77}},{"value":"/ expanded to match capture groups) or a function that takes the matches'","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333395,"byte_end":333470,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ `Captures` and returns the replaced byte string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333475,"byte_end":333527,"line_start":357,"line_end":357,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333532,"byte_end":333535,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If no match is found, then a copy of the byte string is returned","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333540,"byte_end":333608,"line_start":359,"line_end":359,"column_start":5,"column_end":73}},{"value":"/ unchanged.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333613,"byte_end":333627,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333632,"byte_end":333635,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Replacement string syntax","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333640,"byte_end":333671,"line_start":362,"line_end":362,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333676,"byte_end":333679,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ All instances of `$name` in the replacement text is replaced with the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333684,"byte_end":333757,"line_start":364,"line_end":364,"column_start":5,"column_end":78}},{"value":"/ corresponding capture group `name`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333762,"byte_end":333801,"line_start":365,"line_end":365,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333806,"byte_end":333809,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333814,"byte_end":333876,"line_start":367,"line_end":367,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333881,"byte_end":333956,"line_start":368,"line_end":368,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":333961,"byte_end":334032,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334037,"byte_end":334093,"line_start":370,"line_end":370,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334098,"byte_end":334101,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334106,"byte_end":334179,"line_start":372,"line_end":372,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334184,"byte_end":334255,"line_start":373,"line_end":373,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334260,"byte_end":334263,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334268,"byte_end":334339,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334344,"byte_end":334418,"line_start":376,"line_end":376,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334423,"byte_end":334484,"line_start":377,"line_end":377,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334489,"byte_end":334492,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334497,"byte_end":334533,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334538,"byte_end":334541,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334546,"byte_end":334560,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334565,"byte_end":334568,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Note that this function is polymorphic with respect to the replacement.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334573,"byte_end":334648,"line_start":383,"line_end":383,"column_start":5,"column_end":80}},{"value":"/ In typical usage, this can just be a normal byte string:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334653,"byte_end":334713,"line_start":384,"line_end":384,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334718,"byte_end":334721,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334726,"byte_end":334737,"line_start":386,"line_end":386,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334742,"byte_end":334792,"line_start":387,"line_end":387,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334797,"byte_end":334814,"line_start":388,"line_end":388,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(\"[^01]+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334819,"byte_end":334862,"line_start":389,"line_end":389,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(re.replace(b\"1078910\", &b\"\"[..]), &b\"1010\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334867,"byte_end":334930,"line_start":390,"line_end":390,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334935,"byte_end":334942,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334947,"byte_end":334954,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334959,"byte_end":334962,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ But anything satisfying the `Replacer` trait will work. For example, a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":334967,"byte_end":335041,"line_start":394,"line_end":394,"column_start":5,"column_end":79}},{"value":"/ closure of type `|&Captures| -> Vec<u8>` provides direct access to the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335046,"byte_end":335120,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ captures corresponding to a match. This allows one to access capturing","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335125,"byte_end":335199,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/ group matches easily:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335204,"byte_end":335229,"line_start":397,"line_end":397,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335234,"byte_end":335237,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335242,"byte_end":335253,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335258,"byte_end":335308,"line_start":400,"line_end":400,"column_start":5,"column_end":55}},{"value":"/ # use regex::bytes::Captures; fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335313,"byte_end":335358,"line_start":401,"line_end":401,"column_start":5,"column_end":50}},{"value":"/ let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335363,"byte_end":335419,"line_start":402,"line_end":402,"column_start":5,"column_end":61}},{"value":"/ let result = re.replace(b\"Springsteen, Bruce\", |caps: &Captures| {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335424,"byte_end":335494,"line_start":403,"line_end":403,"column_start":5,"column_end":75}},{"value":"/     let mut replacement = caps[2].to_owned();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335499,"byte_end":335548,"line_start":404,"line_end":404,"column_start":5,"column_end":54}},{"value":"/     replacement.push(b' ');","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335553,"byte_end":335584,"line_start":405,"line_end":405,"column_start":5,"column_end":36}},{"value":"/     replacement.extend(&caps[1]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335589,"byte_end":335626,"line_start":406,"line_end":406,"column_start":5,"column_end":42}},{"value":"/     replacement","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335631,"byte_end":335650,"line_start":407,"line_end":407,"column_start":5,"column_end":24}},{"value":"/ });","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335655,"byte_end":335662,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(result, &b\"Bruce Springsteen\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335667,"byte_end":335717,"line_start":409,"line_end":409,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335722,"byte_end":335729,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335734,"byte_end":335741,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335746,"byte_end":335749,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ But this is a bit cumbersome to use all the time. Instead, a simple","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335754,"byte_end":335825,"line_start":413,"line_end":413,"column_start":5,"column_end":76}},{"value":"/ syntax is supported that expands `$name` into the corresponding capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335830,"byte_end":335905,"line_start":414,"line_end":414,"column_start":5,"column_end":80}},{"value":"/ group. Here's the last example, but using this expansion technique","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335910,"byte_end":335980,"line_start":415,"line_end":415,"column_start":5,"column_end":75}},{"value":"/ with named capture groups:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":335985,"byte_end":336015,"line_start":416,"line_end":416,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336020,"byte_end":336023,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336028,"byte_end":336039,"line_start":418,"line_end":418,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336044,"byte_end":336094,"line_start":419,"line_end":419,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336099,"byte_end":336116,"line_start":420,"line_end":420,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336121,"byte_end":336194,"line_start":421,"line_end":421,"column_start":5,"column_end":78}},{"value":"/ let result = re.replace(b\"Springsteen, Bruce\", &b\"$first $last\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336199,"byte_end":336272,"line_start":422,"line_end":422,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(result, &b\"Bruce Springsteen\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336277,"byte_end":336327,"line_start":423,"line_end":423,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336332,"byte_end":336339,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336344,"byte_end":336351,"line_start":425,"line_end":425,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336356,"byte_end":336359,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Note that using `$2` instead of `$first` or `$1` instead of `$last`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336364,"byte_end":336435,"line_start":427,"line_end":427,"column_start":5,"column_end":76}},{"value":"/ would produce the same result. To write a literal `$` use `$$`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336440,"byte_end":336507,"line_start":428,"line_end":428,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336512,"byte_end":336515,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Sometimes the replacement string requires use of curly braces to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336520,"byte_end":336588,"line_start":430,"line_end":430,"column_start":5,"column_end":73}},{"value":"/ delineate a capture group replacement and surrounding literal text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336593,"byte_end":336664,"line_start":431,"line_end":431,"column_start":5,"column_end":76}},{"value":"/ For example, if we wanted to join two words together with an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336669,"byte_end":336733,"line_start":432,"line_end":432,"column_start":5,"column_end":69}},{"value":"/ underscore:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336738,"byte_end":336753,"line_start":433,"line_end":433,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336758,"byte_end":336761,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336766,"byte_end":336777,"line_start":435,"line_end":435,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336782,"byte_end":336832,"line_start":436,"line_end":436,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336837,"byte_end":336854,"line_start":437,"line_end":437,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<first>\\w+)\\s+(?P<second>\\w+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336859,"byte_end":336929,"line_start":438,"line_end":438,"column_start":5,"column_end":75}},{"value":"/ let result = re.replace(b\"deep fried\", &b\"${first}_$second\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":336934,"byte_end":337003,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(result, &b\"deep_fried\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337008,"byte_end":337051,"line_start":440,"line_end":440,"column_start":5,"column_end":48}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337056,"byte_end":337063,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337068,"byte_end":337075,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337080,"byte_end":337083,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Without the curly braces, the capture group name `first_` would be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337088,"byte_end":337158,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ used, and since it doesn't exist, it would be replaced with the empty","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337163,"byte_end":337236,"line_start":445,"line_end":445,"column_start":5,"column_end":78}},{"value":"/ string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337241,"byte_end":337252,"line_start":446,"line_end":446,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337257,"byte_end":337260,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Finally, sometimes you just want to replace a literal string with no","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337265,"byte_end":337337,"line_start":448,"line_end":448,"column_start":5,"column_end":77}},{"value":"/ regard for capturing group expansion. This can be done by wrapping a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337342,"byte_end":337414,"line_start":449,"line_end":449,"column_start":5,"column_end":77}},{"value":"/ byte string with `NoExpand`:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337419,"byte_end":337451,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337456,"byte_end":337459,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337464,"byte_end":337475,"line_start":452,"line_end":452,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337480,"byte_end":337530,"line_start":453,"line_end":453,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337535,"byte_end":337552,"line_start":454,"line_end":454,"column_start":5,"column_end":22}},{"value":"/ use regex::bytes::NoExpand;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337557,"byte_end":337588,"line_start":455,"line_end":455,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337593,"byte_end":337596,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337601,"byte_end":337665,"line_start":457,"line_end":457,"column_start":5,"column_end":69}},{"value":"/ let result = re.replace(b\"Springsteen, Bruce\", NoExpand(b\"$2 $last\"));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337670,"byte_end":337744,"line_start":458,"line_end":458,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(result, &b\"$2 $last\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337749,"byte_end":337790,"line_start":459,"line_end":459,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337795,"byte_end":337802,"line_start":460,"line_end":460,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337807,"byte_end":337814,"line_start":461,"line_end":461,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338290,"byte_end":338301,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"pub fn replace_all<'t, R: Replacer>(&Self, &'t [u8], R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[{"value":"/ Replaces all non-overlapping matches in `text` with the replacement","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":337979,"byte_end":338050,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ provided. This is the same as calling `replacen` with `limit` set to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338055,"byte_end":338127,"line_start":471,"line_end":471,"column_start":5,"column_end":77}},{"value":"/ `0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338132,"byte_end":338140,"line_start":472,"line_end":472,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338145,"byte_end":338148,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338153,"byte_end":338221,"line_start":474,"line_end":474,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338226,"byte_end":338278,"line_start":475,"line_end":475,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338770,"byte_end":338778,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"pub fn replacen<'t, R: Replacer>(&Self, &'t [u8], usize, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[{"value":"/ Replaces at most `limit` non-overlapping matches in `text` with the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338447,"byte_end":338518,"line_start":484,"line_end":484,"column_start":5,"column_end":76}},{"value":"/ replacement provided. If `limit` is 0, then all non-overlapping matches","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338523,"byte_end":338598,"line_start":485,"line_end":485,"column_start":5,"column_end":80}},{"value":"/ are replaced.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338603,"byte_end":338620,"line_start":486,"line_end":486,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338625,"byte_end":338628,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338633,"byte_end":338701,"line_start":488,"line_end":488,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":338706,"byte_end":338758,"line_start":489,"line_end":489,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341253,"byte_end":341267,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"pub fn shortest_match(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[{"value":"/ Returns the end location of a match in the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340464,"byte_end":340522,"line_start":540,"line_end":540,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340527,"byte_end":340530,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ This method may have the same performance characteristics as","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340535,"byte_end":340599,"line_start":542,"line_end":542,"column_start":5,"column_end":69}},{"value":"/ `is_match`, except it provides an end location for a match. In","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340604,"byte_end":340670,"line_start":543,"line_end":543,"column_start":5,"column_end":71}},{"value":"/ particular, the location returned *may be shorter* than the proper end","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340675,"byte_end":340749,"line_start":544,"line_end":544,"column_start":5,"column_end":79}},{"value":"/ of the leftmost-first match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340754,"byte_end":340786,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340791,"byte_end":340794,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340799,"byte_end":340812,"line_start":547,"line_end":547,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340817,"byte_end":340820,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Typically, `a+` would match the entire first sequence of `a` in some","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340825,"byte_end":340897,"line_start":549,"line_end":549,"column_start":5,"column_end":77}},{"value":"/ text, but `shortest_match` can give up as soon as it sees the first","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340902,"byte_end":340973,"line_start":550,"line_end":550,"column_start":5,"column_end":76}},{"value":"/ `a`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340978,"byte_end":340986,"line_start":551,"line_end":551,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340991,"byte_end":340994,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340999,"byte_end":341010,"line_start":553,"line_end":553,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341015,"byte_end":341065,"line_start":554,"line_end":554,"column_start":5,"column_end":55}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341070,"byte_end":341087,"line_start":555,"line_end":555,"column_start":5,"column_end":22}},{"value":"/ let text = b\"aaaaa\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341092,"byte_end":341116,"line_start":556,"line_end":556,"column_start":5,"column_end":29}},{"value":"/ let pos = Regex::new(r\"a+\").unwrap().shortest_match(text);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341121,"byte_end":341183,"line_start":557,"line_end":557,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(pos, Some(1));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341188,"byte_end":341217,"line_start":558,"line_end":558,"column_start":5,"column_end":34}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341222,"byte_end":341229,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341234,"byte_end":341241,"line_start":560,"line_end":560,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341655,"byte_end":341672,"line_start":571,"line_end":571,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"pub fn shortest_match_at(&Self, &[u8], usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as shortest_match, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341358,"byte_end":341432,"line_start":565,"line_end":565,"column_start":5,"column_end":79}},{"value":"/ offset.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341437,"byte_end":341448,"line_start":566,"line_end":566,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341453,"byte_end":341456,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341461,"byte_end":341536,"line_start":568,"line_end":568,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341541,"byte_end":341610,"line_start":569,"line_end":569,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341615,"byte_end":341643,"line_start":570,"line_end":570,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342116,"byte_end":342127,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"pub fn is_match_at(&Self, &[u8], usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as is_match, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341825,"byte_end":341893,"line_start":579,"line_end":579,"column_start":5,"column_end":73}},{"value":"/ offset.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341898,"byte_end":341909,"line_start":580,"line_end":580,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341914,"byte_end":341917,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":341922,"byte_end":341997,"line_start":582,"line_end":582,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342002,"byte_end":342071,"line_start":583,"line_end":583,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342076,"byte_end":342104,"line_start":584,"line_end":584,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342524,"byte_end":342531,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"pub fn find_at<'t>(&Self, &'t [u8], usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as find, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342237,"byte_end":342301,"line_start":589,"line_end":589,"column_start":5,"column_end":69}},{"value":"/ offset.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342306,"byte_end":342317,"line_start":590,"line_end":590,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342322,"byte_end":342325,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342330,"byte_end":342405,"line_start":592,"line_end":592,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342410,"byte_end":342479,"line_start":593,"line_end":593,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342484,"byte_end":342512,"line_start":594,"line_end":594,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343179,"byte_end":343192,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"pub fn captures_read<'t>(&Self, &mut CaptureLocations, &'t [u8])\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[{"value":"/ This is like `captures`, but uses","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342735,"byte_end":342772,"line_start":604,"line_end":604,"column_start":5,"column_end":42}},{"value":"/ [`CaptureLocations`](struct.CaptureLocations.html)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342777,"byte_end":342831,"line_start":605,"line_end":605,"column_start":5,"column_end":59}},{"value":"/ instead of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342836,"byte_end":342850,"line_start":606,"line_end":606,"column_start":5,"column_end":19}},{"value":"/ [`Captures`](struct.Captures.html) in order to amortize allocations.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342855,"byte_end":342927,"line_start":607,"line_end":607,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342932,"byte_end":342935,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ To create a `CaptureLocations` value, use the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342940,"byte_end":342989,"line_start":609,"line_end":609,"column_start":5,"column_end":54}},{"value":"/ `Regex::capture_locations` method.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":342994,"byte_end":343032,"line_start":610,"line_end":610,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343037,"byte_end":343040,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This returns the overall match if this was successful, which is always","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343045,"byte_end":343119,"line_start":612,"line_end":612,"column_start":5,"column_end":79}},{"value":"/ equivalence to the `0`th capture group.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343124,"byte_end":343167,"line_start":613,"line_end":613,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343699,"byte_end":343715,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"pub fn captures_read_at<'t>(&Self, &mut CaptureLocations, &'t [u8], usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[{"value":"/ Returns the same as `captures_read`, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343359,"byte_end":343434,"line_start":622,"line_end":622,"column_start":5,"column_end":80}},{"value":"/ offset and populates the capture locations given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343439,"byte_end":343492,"line_start":623,"line_end":623,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343497,"byte_end":343500,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343505,"byte_end":343580,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343585,"byte_end":343654,"line_start":626,"line_end":626,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":343659,"byte_end":343687,"line_start":627,"line_end":627,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344260,"byte_end":344276,"line_start":646,"line_end":646,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"pub fn read_captures_at<'t>(&Self, &mut CaptureLocations, &'t [u8], usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[{"value":"/ An undocumented alias for `captures_read_at`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344004,"byte_end":344053,"line_start":640,"line_end":640,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344058,"byte_end":344061,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate previously used this routine, so to avoid","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344066,"byte_end":344134,"line_start":642,"line_end":642,"column_start":5,"column_end":73}},{"value":"/ breaking that crate, we continue to provide the name as an undocumented","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344139,"byte_end":344214,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ alias.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344219,"byte_end":344229,"line_start":644,"line_end":644,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344565,"byte_end":344571,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[{"value":"/ Returns the original string of this regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344507,"byte_end":344553,"line_start":658,"line_end":658,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344694,"byte_end":344707,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"pub fn capture_names(&Self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the capture names.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344635,"byte_end":344682,"line_start":663,"line_end":663,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344843,"byte_end":344855,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"pub fn captures_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[{"value":"/ Returns the number of captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344796,"byte_end":344831,"line_start":668,"line_end":668,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345066,"byte_end":345083,"line_start":675,"line_end":675,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"pub fn capture_locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[{"value":"/ Returns an empty set of capture locations that can be reused in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344922,"byte_end":344989,"line_start":673,"line_end":673,"column_start":5,"column_end":72}},{"value":"/ multiple calls to `captures_read` or `captures_read_at`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344994,"byte_end":345054,"line_start":674,"line_end":674,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345430,"byte_end":345439,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"pub fn locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[{"value":"/ An alias for `capture_locations` to preserve backward compatibility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345180,"byte_end":345252,"line_start":679,"line_end":679,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345257,"byte_end":345260,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate uses this method, so to avoid breaking that","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345265,"byte_end":345335,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/ crate, we continue to export it as an undocumented API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345340,"byte_end":345399,"line_start":682,"line_end":682,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":903},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345929,"byte_end":345936,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping matches for a particular string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345534,"byte_end":345607,"line_start":689,"line_end":689,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345608,"byte_end":345611,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ The iterator yields a tuple of integers corresponding to the start and end","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345612,"byte_end":345690,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ of the match. The indices are byte offsets. The iterator stops when no more","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345691,"byte_end":345770,"line_start":692,"line_end":692,"column_start":1,"column_end":80}},{"value":"/ matches can be found.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345771,"byte_end":345796,"line_start":693,"line_end":693,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345797,"byte_end":345800,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345801,"byte_end":345876,"line_start":695,"line_end":695,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched byte string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":345877,"byte_end":345917,"line_start":696,"line_end":696,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":914},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346509,"byte_end":346523,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[{"value":"/ An iterator that yields all non-overlapping capture groups matching a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346206,"byte_end":346279,"line_start":708,"line_end":708,"column_start":1,"column_end":74}},{"value":"/ particular regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346280,"byte_end":346314,"line_start":709,"line_end":709,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346315,"byte_end":346318,"line_start":710,"line_end":710,"column_start":1,"column_end":4}},{"value":"/ The iterator stops when no more matches can be found.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346319,"byte_end":346376,"line_start":711,"line_end":711,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346377,"byte_end":346380,"line_start":712,"line_end":712,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346381,"byte_end":346456,"line_start":713,"line_end":713,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched byte string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346457,"byte_end":346497,"line_start":714,"line_end":714,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":925},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347104,"byte_end":347109,"line_start":733,"line_end":733,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields all substrings delimited by a regular expression match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346901,"byte_end":346967,"line_start":729,"line_end":729,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346968,"byte_end":346971,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346972,"byte_end":347047,"line_start":731,"line_end":731,"column_start":1,"column_end":76}},{"value":"/ lifetime of the byte string being split.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347048,"byte_end":347092,"line_start":732,"line_end":732,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":935},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348092,"byte_end":348098,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields at most `N` substrings delimited by a regular expression match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347812,"byte_end":347886,"line_start":762,"line_end":762,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347887,"byte_end":347890,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ The last substring will be whatever remains after splitting.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347891,"byte_end":347955,"line_start":764,"line_end":764,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347956,"byte_end":347959,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347960,"byte_end":348035,"line_start":766,"line_end":766,"column_start":1,"column_end":76}},{"value":"/ lifetime of the byte string being split.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348036,"byte_end":348080,"line_start":767,"line_end":767,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":945},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348793,"byte_end":348805,"line_start":796,"line_end":796,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[{"value":"/ An iterator over the names of all possible captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348536,"byte_end":348592,"line_start":790,"line_end":790,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348593,"byte_end":348596,"line_start":791,"line_end":791,"column_start":1,"column_end":4}},{"value":"/ `None` indicates an unnamed capture; the first element (capture 0, the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348597,"byte_end":348671,"line_start":792,"line_end":792,"column_start":1,"column_end":75}},{"value":"/ whole matched region) is always unnamed.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348672,"byte_end":348716,"line_start":793,"line_end":793,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348717,"byte_end":348720,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348721,"byte_end":348781,"line_start":795,"line_end":795,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349940,"byte_end":349956,"line_start":827,"line_end":827,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[{"value":"/ CaptureLocations is a low level representation of the raw offsets of each","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349170,"byte_end":349247,"line_start":811,"line_end":811,"column_start":1,"column_end":78}},{"value":"/ submatch.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349248,"byte_end":349261,"line_start":812,"line_end":812,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349262,"byte_end":349265,"line_start":813,"line_end":813,"column_start":1,"column_end":4}},{"value":"/ You can think of this as a lower level","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349266,"byte_end":349308,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ [`Captures`](struct.Captures.html), where this type does not support","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349309,"byte_end":349381,"line_start":815,"line_end":815,"column_start":1,"column_end":73}},{"value":"/ named capturing groups directly and it does not borrow the text that these","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349382,"byte_end":349460,"line_start":816,"line_end":816,"column_start":1,"column_end":79}},{"value":"/ offsets were matched on.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349461,"byte_end":349489,"line_start":817,"line_end":817,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349490,"byte_end":349493,"line_start":818,"line_end":818,"column_start":1,"column_end":4}},{"value":"/ Primarily, this type is useful when using the lower level `Regex` APIs","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349494,"byte_end":349568,"line_start":819,"line_end":819,"column_start":1,"column_end":75}},{"value":"/ such as `read_captures`, which permits amortizing the allocation in which","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349569,"byte_end":349646,"line_start":820,"line_end":820,"column_start":1,"column_end":78}},{"value":"/ capture match locations are stored.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349647,"byte_end":349686,"line_start":821,"line_end":821,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349687,"byte_end":349690,"line_start":822,"line_end":822,"column_start":1,"column_end":4}},{"value":"/ In order to build a value of this type, you'll need to call the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349691,"byte_end":349758,"line_start":823,"line_end":823,"column_start":1,"column_end":68}},{"value":"/ `capture_locations` method on the `Regex` being used to execute the search.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349759,"byte_end":349838,"line_start":824,"line_end":824,"column_start":1,"column_end":80}},{"value":"/ The value returned can then be reused in subsequent searches.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349839,"byte_end":349904,"line_start":825,"line_end":825,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":956},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350278,"byte_end":350287,"line_start":835,"line_end":835,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[{"value":"/ A type alias for `CaptureLocations` for backwards compatibility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":349980,"byte_end":350048,"line_start":829,"line_end":829,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350049,"byte_end":350052,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ Previously, we exported `CaptureLocations` as `Locations` in an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350053,"byte_end":350120,"line_start":831,"line_end":831,"column_start":1,"column_end":68}},{"value":"/ undocumented API. To prevent breaking that code (e.g., in `regex-capi`),","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350121,"byte_end":350197,"line_start":832,"line_end":832,"column_start":1,"column_end":77}},{"value":"/ we continue re-exporting the same undocumented API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350198,"byte_end":350253,"line_start":833,"line_end":833,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350645,"byte_end":350648,"line_start":843,"line_end":843,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"pub fn get(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"/ Returns the start and end positions of the Nth capture group. Returns","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350337,"byte_end":350410,"line_start":838,"line_end":838,"column_start":5,"column_end":78}},{"value":"/ `None` if `i` is not a valid capture group or if the capture group did","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350415,"byte_end":350489,"line_start":839,"line_end":839,"column_start":5,"column_end":79}},{"value":"/ not match anything. The positions returned are *always* byte indices","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350494,"byte_end":350566,"line_start":840,"line_end":840,"column_start":5,"column_end":77}},{"value":"/ with respect to the original string matched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350571,"byte_end":350619,"line_start":841,"line_end":841,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350624,"byte_end":350633,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350943,"byte_end":350946,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"/ Returns the total number of capturing groups.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350727,"byte_end":350776,"line_start":847,"line_end":847,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350781,"byte_end":350784,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1` since every regex has at least `1`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350789,"byte_end":350855,"line_start":849,"line_end":849,"column_start":5,"column_end":71}},{"value":"/ capturing group that corresponds to the entire match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350860,"byte_end":350917,"line_start":850,"line_end":850,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350922,"byte_end":350931,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351306,"byte_end":351309,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"pub fn pos(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"/ An alias for the `get` method for backwards compatibility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350997,"byte_end":351059,"line_start":856,"line_end":856,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351064,"byte_end":351067,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ Previously, we exported `get` as `pos` in an undocumented API. To","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351072,"byte_end":351141,"line_start":858,"line_end":858,"column_start":5,"column_end":74}},{"value":"/ prevent breaking that code (e.g., in `regex-capi`), we continue","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351146,"byte_end":351213,"line_start":859,"line_end":859,"column_start":5,"column_end":72}},{"value":"/ re-exporting the same undocumented API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351218,"byte_end":351261,"line_start":860,"line_end":860,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351285,"byte_end":351294,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":961},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351943,"byte_end":351951,"line_start":879,"line_end":879,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[{"value":"/ Captures represents a group of captured byte strings for a single match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351384,"byte_end":351460,"line_start":868,"line_end":868,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351461,"byte_end":351464,"line_start":869,"line_end":869,"column_start":1,"column_end":4}},{"value":"/ The 0th capture always corresponds to the entire match. Each subsequent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351465,"byte_end":351540,"line_start":870,"line_end":870,"column_start":1,"column_end":76}},{"value":"/ index corresponds to the next capture group in the regex. If a capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351541,"byte_end":351615,"line_start":871,"line_end":871,"column_start":1,"column_end":75}},{"value":"/ group is named, then the matched byte string is *also* available via the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351616,"byte_end":351692,"line_start":872,"line_end":872,"column_start":1,"column_end":77}},{"value":"/ `name` method. (Note that the 0th capture is always unnamed and so must be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351693,"byte_end":351771,"line_start":873,"line_end":873,"column_start":1,"column_end":79}},{"value":"/ accessed with the `get` method.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351772,"byte_end":351808,"line_start":874,"line_end":874,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351809,"byte_end":351812,"line_start":875,"line_end":875,"column_start":1,"column_end":4}},{"value":"/ Positions returned from a capture group are always byte indices.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351813,"byte_end":351881,"line_start":876,"line_end":876,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351882,"byte_end":351885,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":351886,"byte_end":351931,"line_start":878,"line_end":878,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352886,"byte_end":352889,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"pub fn get(&Self, usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the match associated with the capture group at index `i`. If","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352087,"byte_end":352159,"line_start":886,"line_end":886,"column_start":5,"column_end":77}},{"value":"/ `i` does not correspond to a capture group, or if the capture group","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352164,"byte_end":352235,"line_start":887,"line_end":887,"column_start":5,"column_end":76}},{"value":"/ did not participate in the match, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352240,"byte_end":352302,"line_start":888,"line_end":888,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352307,"byte_end":352310,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352315,"byte_end":352329,"line_start":890,"line_end":890,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352334,"byte_end":352337,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Get the text of the match with a default of an empty string if this","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352342,"byte_end":352413,"line_start":892,"line_end":892,"column_start":5,"column_end":76}},{"value":"/ group didn't participate in the match:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352418,"byte_end":352460,"line_start":893,"line_end":893,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352465,"byte_end":352468,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352473,"byte_end":352484,"line_start":895,"line_end":895,"column_start":5,"column_end":16}},{"value":"/ # use regex::bytes::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352489,"byte_end":352519,"line_start":896,"line_end":896,"column_start":5,"column_end":35}},{"value":"/ let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352524,"byte_end":352589,"line_start":897,"line_end":897,"column_start":5,"column_end":70}},{"value":"/ let caps = re.captures(b\"abc123\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352594,"byte_end":352641,"line_start":898,"line_end":898,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352646,"byte_end":352649,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ let text1 = caps.get(1).map_or(&b\"\"[..], |m| m.as_bytes());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352654,"byte_end":352717,"line_start":900,"line_end":900,"column_start":5,"column_end":68}},{"value":"/ let text2 = caps.get(2).map_or(&b\"\"[..], |m| m.as_bytes());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352722,"byte_end":352785,"line_start":901,"line_end":901,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(text1, &b\"123\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352790,"byte_end":352825,"line_start":902,"line_end":902,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(text2, &b\"\"[..]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352830,"byte_end":352862,"line_start":903,"line_end":903,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352867,"byte_end":352874,"line_start":904,"line_end":904,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353174,"byte_end":353178,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"pub fn name(&Self, &str) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the match for the capture group named `name`. If `name` isn't a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353008,"byte_end":353083,"line_start":909,"line_end":909,"column_start":5,"column_end":80}},{"value":"/ valid capture group or didn't match anything, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353088,"byte_end":353162,"line_start":910,"line_end":910,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353610,"byte_end":353614,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"pub fn iter<'c>(&'c Self) -> SubCaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353295,"byte_end":353366,"line_start":915,"line_end":915,"column_start":5,"column_end":76}},{"value":"/ they appear in the regex. If a particular capture group didn't","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353371,"byte_end":353437,"line_start":916,"line_end":916,"column_start":5,"column_end":71}},{"value":"/ participate in the match, then `None` is yielded for that capture.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353442,"byte_end":353512,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353517,"byte_end":353520,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ The first match always corresponds to the overall match of the regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353525,"byte_end":353598,"line_start":919,"line_end":919,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354658,"byte_end":354664,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"pub fn expand(&Self, &[u8], &mut Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[{"value":"/ Expands all instances of `$name` in `replacement` to the corresponding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353767,"byte_end":353841,"line_start":927,"line_end":927,"column_start":5,"column_end":79}},{"value":"/ capture group `name`, and writes them to the `dst` buffer given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353846,"byte_end":353914,"line_start":928,"line_end":928,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353919,"byte_end":353922,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353927,"byte_end":353989,"line_start":930,"line_end":930,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":353994,"byte_end":354069,"line_start":931,"line_end":931,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354074,"byte_end":354145,"line_start":932,"line_end":932,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354150,"byte_end":354206,"line_start":933,"line_end":933,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354211,"byte_end":354214,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354219,"byte_end":354292,"line_start":935,"line_end":935,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354297,"byte_end":354368,"line_start":936,"line_end":936,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354373,"byte_end":354376,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354381,"byte_end":354452,"line_start":938,"line_end":938,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354457,"byte_end":354531,"line_start":939,"line_end":939,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354536,"byte_end":354597,"line_start":940,"line_end":940,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354602,"byte_end":354605,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354610,"byte_end":354646,"line_start":942,"line_end":942,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354975,"byte_end":354978,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"/ Returns the number of captured groups.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354769,"byte_end":354811,"line_start":947,"line_end":947,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354816,"byte_end":354819,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1`, since every regex has at least one capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354824,"byte_end":354899,"line_start":949,"line_end":949,"column_start":5,"column_end":80}},{"value":"/ group that corresponds to the full match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354904,"byte_end":354949,"line_start":950,"line_end":950,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":354954,"byte_end":354963,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358108,"byte_end":358125,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which they","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357656,"byte_end":357732,"line_start":1040,"line_end":1040,"column_start":1,"column_end":77}},{"value":"/ appear in the regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357733,"byte_end":357757,"line_start":1041,"line_end":1041,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357758,"byte_end":357761,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ If a particular capture group didn't participate in the match, then `None`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357762,"byte_end":357840,"line_start":1043,"line_end":1043,"column_start":1,"column_end":79}},{"value":"/ is yielded for that capture. The first match always corresponds to the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357841,"byte_end":357915,"line_start":1044,"line_end":1044,"column_start":1,"column_end":75}},{"value":"/ overall match of the regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357916,"byte_end":357947,"line_start":1045,"line_end":1045,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357948,"byte_end":357951,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'c` corresponds to the lifetime of the `Captures` value, and","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357952,"byte_end":358030,"line_start":1047,"line_end":1047,"column_start":1,"column_end":79}},{"value":"/ the lifetime `'t` corresponds to the originally matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358031,"byte_end":358096,"line_start":1048,"line_end":1048,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358818,"byte_end":358826,"line_start":1070,"line_end":1070,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1023}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[{"value":"/ Replacer describes types that can be used to replace matches in a byte","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358454,"byte_end":358528,"line_start":1063,"line_end":1063,"column_start":1,"column_end":75}},{"value":"/ string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358529,"byte_end":358540,"line_start":1064,"line_end":1064,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358541,"byte_end":358544,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ In general, users of this crate shouldn't need to implement this trait,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358545,"byte_end":358620,"line_start":1066,"line_end":1066,"column_start":1,"column_end":76}},{"value":"/ since implementations are already provided for `&[u8]` and","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358621,"byte_end":358683,"line_start":1067,"line_end":1067,"column_start":1,"column_end":63}},{"value":"/ `FnMut(&Captures) -> Vec<u8>` (or any `FnMut(&Captures) -> T`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358684,"byte_end":358749,"line_start":1068,"line_end":1068,"column_start":1,"column_end":66}},{"value":"/ where `T: AsRef<[u8]>`), which covers most use cases.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358750,"byte_end":358807,"line_start":1069,"line_end":1069,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359112,"byte_end":359126,"line_start":1078,"line_end":1078,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"pub fn replace_append(&mut Self, &Captures, &mut Vec<u8>)","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[{"value":"/ Appends text to `dst` to replace the current match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358833,"byte_end":358888,"line_start":1071,"line_end":1071,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358893,"byte_end":358896,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ The current match is represented by `caps`, which is guaranteed to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358901,"byte_end":358971,"line_start":1073,"line_end":1073,"column_start":5,"column_end":75}},{"value":"/ have a match at capture group `0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358976,"byte_end":359014,"line_start":1074,"line_end":1074,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359019,"byte_end":359022,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ For example, a no-op replacement would be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359027,"byte_end":359072,"line_start":1076,"line_end":1076,"column_start":5,"column_end":50}},{"value":"/ `dst.extend(&caps[0])`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359077,"byte_end":359104,"line_start":1077,"line_end":1077,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359537,"byte_end":359549,"line_start":1087,"line_end":1087,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"pub fn no_expansion<'r>(&'r mut Self) -> Option<Cow>","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[{"value":"/ Return a fixed unchanging replacement byte string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359180,"byte_end":359234,"line_start":1080,"line_end":1080,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359239,"byte_end":359242,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ When doing replacements, if access to `Captures` is not needed (e.g.,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359247,"byte_end":359320,"line_start":1082,"line_end":1082,"column_start":5,"column_end":78}},{"value":"/ the replacement byte string does not need `$` expansion), then it can","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359325,"byte_end":359398,"line_start":1083,"line_end":1083,"column_start":5,"column_end":78}},{"value":"/ be beneficial to avoid finding sub-captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359403,"byte_end":359451,"line_start":1084,"line_end":1084,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359456,"byte_end":359459,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ In general, this is called once for every call to `replacen`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359464,"byte_end":359529,"line_start":1086,"line_end":1086,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360280,"byte_end":360286,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"pub fn by_ref<'r>(&'r mut Self) -> ReplacerRef","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[{"value":"/ Return a `Replacer` that borrows and wraps this `Replacer`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359619,"byte_end":359682,"line_start":1091,"line_end":1091,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359687,"byte_end":359690,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ This is useful when you want to take a generic `Replacer` (which might","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359695,"byte_end":359769,"line_start":1093,"line_end":1093,"column_start":5,"column_end":79}},{"value":"/ not be cloneable) and use it without consuming it, so it can be used","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359774,"byte_end":359846,"line_start":1094,"line_end":1094,"column_start":5,"column_end":77}},{"value":"/ more than once.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359851,"byte_end":359870,"line_start":1095,"line_end":1095,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359875,"byte_end":359878,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359883,"byte_end":359896,"line_start":1097,"line_end":1097,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359901,"byte_end":359904,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359909,"byte_end":359916,"line_start":1099,"line_end":1099,"column_start":5,"column_end":12}},{"value":"/ use regex::bytes::{Regex, Replacer};","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359921,"byte_end":359961,"line_start":1100,"line_end":1100,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359966,"byte_end":359969,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ fn replace_all_twice<R: Replacer>(","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":359974,"byte_end":360012,"line_start":1102,"line_end":1102,"column_start":5,"column_end":43}},{"value":"/     re: Regex,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360017,"byte_end":360035,"line_start":1103,"line_end":1103,"column_start":5,"column_end":23}},{"value":"/     src: &[u8],","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360040,"byte_end":360059,"line_start":1104,"line_end":1104,"column_start":5,"column_end":24}},{"value":"/     mut rep: R,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360064,"byte_end":360083,"line_start":1105,"line_end":1105,"column_start":5,"column_end":24}},{"value":"/ ) -> Vec<u8> {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360088,"byte_end":360106,"line_start":1106,"line_end":1106,"column_start":5,"column_end":23}},{"value":"/     let dst = re.replace_all(src, rep.by_ref());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360111,"byte_end":360163,"line_start":1107,"line_end":1107,"column_start":5,"column_end":57}},{"value":"/     let dst = re.replace_all(&dst, rep.by_ref());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360168,"byte_end":360221,"line_start":1108,"line_end":1108,"column_start":5,"column_end":58}},{"value":"/     dst.into_owned()","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360226,"byte_end":360250,"line_start":1109,"line_end":1109,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360255,"byte_end":360260,"line_start":1110,"line_end":1110,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360265,"byte_end":360272,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2199},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360514,"byte_end":360525,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[{"value":"/ By-reference adaptor for a `Replacer`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360367,"byte_end":360408,"line_start":1117,"line_end":1117,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360409,"byte_end":360412,"line_start":1118,"line_end":1118,"column_start":1,"column_end":4}},{"value":"/ Returned by [`Replacer::by_ref`](trait.Replacer.html#method.by_ref).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360413,"byte_end":360485,"line_start":1119,"line_end":1119,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361810,"byte_end":361818,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[{"value":"/ `NoExpand` indicates literal byte string replacement.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361391,"byte_end":361448,"line_start":1151,"line_end":1151,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361449,"byte_end":361452,"line_start":1152,"line_end":1152,"column_start":1,"column_end":4}},{"value":"/ It can be used with `replace` and `replace_all` to do a literal byte string","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361453,"byte_end":361532,"line_start":1153,"line_end":1153,"column_start":1,"column_end":80}},{"value":"/ replacement without expanding `$name` to their corresponding capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361533,"byte_end":361605,"line_start":1154,"line_end":1154,"column_start":1,"column_end":73}},{"value":"/ groups. This can be both convenient (to avoid escaping `$`, for example)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361606,"byte_end":361682,"line_start":1155,"line_end":1155,"column_start":1,"column_end":77}},{"value":"/ and performant (since capture groups don't need to be found).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361683,"byte_end":361748,"line_start":1156,"line_end":1156,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361749,"byte_end":361752,"line_start":1157,"line_end":1157,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the literal text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361753,"byte_end":361798,"line_start":1158,"line_end":1158,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361823,"byte_end":361835,"line_start":1159,"line_end":1159,"column_start":25,"column_end":37},"name":"0","qualname":"::re_bytes::NoExpand::0","value":"&'t [u8]","parent":{"krate":0,"index":1039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2358},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378616,"byte_end":378625,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[{"value":"/ Locations represents the offsets of each capturing group in a regex for","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378402,"byte_end":378477,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ a single match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378478,"byte_end":378497,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378498,"byte_end":378501,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Unlike `Captures`, a `Locations` value only stores offsets.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378502,"byte_end":378565,"line_start":19,"line_end":19,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378954,"byte_end":378957,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"pub fn pos(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"/ Returns the start and end positions of the Nth capture group. Returns","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378660,"byte_end":378733,"line_start":25,"line_end":25,"column_start":5,"column_end":78}},{"value":"/ `None` if `i` is not a valid capture group or if the capture group did","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378738,"byte_end":378812,"line_start":26,"line_end":26,"column_start":5,"column_end":79}},{"value":"/ not match anything. The positions returned are *always* byte indices","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378817,"byte_end":378889,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/ with respect to the original string matched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378894,"byte_end":378942,"line_start":28,"line_end":28,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379401,"byte_end":379405,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"pub fn iter(&Self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[{"value":"/ Creates an iterator of all the capture group positions in order of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379197,"byte_end":379267,"line_start":37,"line_end":37,"column_start":5,"column_end":75}},{"value":"/ appearance in the regular expression. Positions are byte indices","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379272,"byte_end":379340,"line_start":38,"line_end":38,"column_start":5,"column_end":73}},{"value":"/ in terms of the original string matched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379345,"byte_end":379389,"line_start":39,"line_end":39,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379700,"byte_end":379703,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"/ Returns the total number of capturing groups.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379498,"byte_end":379547,"line_start":44,"line_end":44,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379552,"byte_end":379555,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1` since every regex has at least `1`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379560,"byte_end":379626,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"/ capturing group that corresponds to the entire match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379631,"byte_end":379688,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380116,"byte_end":380134,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[{"value":"/ An iterator over capture group positions for a particular match of a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379886,"byte_end":379958,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/ regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379959,"byte_end":379982,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379983,"byte_end":379986,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Positions are byte indices in terms of the original string matched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":379987,"byte_end":380058,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380059,"byte_end":380062,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ `'c` is the lifetime of the captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380063,"byte_end":380104,"line_start":63,"line_end":63,"column_start":1,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381337,"byte_end":381354,"line_start":99,"line_end":99,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[{"value":"/ `RegularExpression` describes types that can implement regex searching.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380620,"byte_end":380695,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380696,"byte_end":380699,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This trait is my attempt at reducing code duplication and to standardize","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380700,"byte_end":380776,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ the internal API. Specific duplication that is avoided are the `find`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380777,"byte_end":380850,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/ and `capture` iterators, which are slightly tricky.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380851,"byte_end":380906,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380907,"byte_end":380910,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ It's not clear whether this trait is worth it, and it also isn't","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380911,"byte_end":380979,"line_start":93,"line_end":93,"column_start":1,"column_end":69}},{"value":"/ clear whether it's useful as a public trait or not. Methods like","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380980,"byte_end":381048,"line_start":94,"line_end":94,"column_start":1,"column_end":69}},{"value":"/ `next_after_empty` reak of bad design, but the rest of the methods seem","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381049,"byte_end":381124,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ somewhat reasonable. One particular thing this trait would expose would be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381125,"byte_end":381203,"line_start":96,"line_end":96,"column_start":1,"column_end":79}},{"value":"/ the ability to start the search of a regex anywhere in a haystack, which","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381204,"byte_end":381280,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ isn't possible in the current public API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381281,"byte_end":381326,"line_start":98,"line_end":98,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381407,"byte_end":381411,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[{"value":"/ The type of the haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381368,"byte_end":381397,"line_start":100,"line_end":100,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381586,"byte_end":381595,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"pub fn slots_len(&Self) -> usize","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[{"value":"/ The number of capture slots in the compiled regular expression. This is","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381426,"byte_end":381501,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ always two times the number of capture groups (two slots per group).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381506,"byte_end":381578,"line_start":104,"line_end":104,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381691,"byte_end":381700,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"pub fn locations(&Self) -> Locations","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[{"value":"/ Allocates fresh space for all capturing groups in this regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381618,"byte_end":381683,"line_start":107,"line_end":107,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382046,"byte_end":382062,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"pub fn next_after_empty(&Self, &Self::Text, usize) -> usize","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[{"value":"/ Returns the position of the next character after `i`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381782,"byte_end":381839,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381844,"byte_end":381847,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ For example, a haystack with type `&[u8]` probably returns `i+1`,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381852,"byte_end":381921,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ whereas a haystack with type `&str` probably returns `i` plus the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381926,"byte_end":381995,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ length of the next UTF-8 sequence.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382000,"byte_end":382038,"line_start":116,"line_end":116,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382169,"byte_end":382186,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"pub fn shortest_match_at(&Self, &Self::Text, usize) -> Option<usize>","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[{"value":"/ Returns the location of the shortest match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382114,"byte_end":382161,"line_start":119,"line_end":119,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382342,"byte_end":382353,"line_start":127,"line_end":127,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"pub fn is_match_at(&Self, &Self::Text, usize) -> bool","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[{"value":"/ Returns whether the regex matches the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382281,"byte_end":382334,"line_start":126,"line_end":126,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382507,"byte_end":382514,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"pub fn find_at(&Self, &Self::Text, usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[{"value":"/ Returns the leftmost-first match location if one exists.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382439,"byte_end":382499,"line_start":133,"line_end":133,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382749,"byte_end":382765,"line_start":142,"line_end":142,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"pub fn captures_read_at(&Self, &mut Locations, &Self::Text, usize)\n-> Option<(usize, usize)>","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[{"value":"/ Returns the leftmost-first match location if one exists, and also","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382618,"byte_end":382687,"line_start":140,"line_end":140,"column_start":5,"column_end":74}},{"value":"/ fills in any matching capture slot locations.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382692,"byte_end":382741,"line_start":141,"line_end":141,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382998,"byte_end":383007,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"pub fn find_iter(Self, &Self::Text) -> Matches<, Self>","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all non-overlapping successive leftmost-first","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382899,"byte_end":382973,"line_start":149,"line_end":149,"column_start":5,"column_end":79}},{"value":"/ matches.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":382978,"byte_end":382990,"line_start":150,"line_end":150,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383329,"byte_end":383342,"line_start":165,"line_end":165,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"pub fn captures_iter(Self, &Self::Text) -> CaptureMatches<, Self>","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all non-overlapping successive leftmost-first","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383216,"byte_end":383290,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ matches with captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383295,"byte_end":383321,"line_start":164,"line_end":164,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1075},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383558,"byte_end":383565,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping successive leftmost-first matches.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383471,"byte_end":383546,"line_start":173,"line_end":173,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383824,"byte_end":383828,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"pub fn text(&Self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[{"value":"/ Return the text being searched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383777,"byte_end":383812,"line_start":182,"line_end":182,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383926,"byte_end":383931,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"pub fn regex(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[{"value":"/ Return the underlying regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383882,"byte_end":383914,"line_start":187,"line_end":187,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385131,"byte_end":385145,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping successive leftmost-first matches with","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385026,"byte_end":385105,"line_start":223,"line_end":223,"column_start":1,"column_end":80}},{"value":"/ captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385106,"byte_end":385119,"line_start":224,"line_end":224,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385342,"byte_end":385346,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"pub fn text(&Self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[{"value":"/ Return the text being searched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385295,"byte_end":385330,"line_start":229,"line_end":229,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385448,"byte_end":385453,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"pub fn regex(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[{"value":"/ Return the underlying regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385404,"byte_end":385436,"line_start":234,"line_end":234,"column_start":5,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1126},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387334,"byte_end":387340,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"pub fn escape(&str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[{"value":"/ Escapes all regular expression meta characters in `text`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387176,"byte_end":387237,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387238,"byte_end":387241,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The string returned may be safely used as a literal in a regular","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387242,"byte_end":387310,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387311,"byte_end":387326,"line_start":30,"line_end":30,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2365},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387591,"byte_end":387596,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"/ Match represents a single match of a regex in a haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387393,"byte_end":387454,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387455,"byte_end":387458,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'t` refers to the lifetime of the matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387459,"byte_end":387534,"line_start":37,"line_end":37,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387776,"byte_end":387781,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"pub fn start(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the starting byte offset of the match in the haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387684,"byte_end":387750,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387755,"byte_end":387764,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387920,"byte_end":387923,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"pub fn end(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"/ Returns the ending byte offset of the match in the haystack.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387830,"byte_end":387894,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387899,"byte_end":387908,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388025,"byte_end":388031,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"pub fn as_str(&Self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"/ Returns the matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387970,"byte_end":387999,"line_start":58,"line_end":58,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388004,"byte_end":388013,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390736,"byte_end":390741,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[{"value":"/ A compiled regular expression for matching Unicode strings.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388472,"byte_end":388535,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388536,"byte_end":388539,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ It is represented as either a sequence of bytecode instructions (dynamic)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388540,"byte_end":388617,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/ or as a specialized Rust function (native). It can be used to search, split","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388618,"byte_end":388697,"line_start":84,"line_end":84,"column_start":1,"column_end":80}},{"value":"/ or replace text. All searching is done with an implicit `.*?` at the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388698,"byte_end":388770,"line_start":85,"line_end":85,"column_start":1,"column_end":73}},{"value":"/ beginning and end of an expression. To force an expression to match the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388771,"byte_end":388846,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ whole string (or a prefix or a suffix), you must use an anchor like `^` or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388847,"byte_end":388925,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/ `$` (or `\\A` and `\\z`).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388926,"byte_end":388953,"line_start":88,"line_end":88,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388954,"byte_end":388957,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ While this crate will handle Unicode strings (whether in the regular","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":388958,"byte_end":389030,"line_start":90,"line_end":90,"column_start":1,"column_end":73}},{"value":"/ expression or in the search text), all positions returned are **byte","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389031,"byte_end":389103,"line_start":91,"line_end":91,"column_start":1,"column_end":73}},{"value":"/ indices**. Every byte index is guaranteed to be at a Unicode code point","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389104,"byte_end":389179,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/ boundary.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389180,"byte_end":389193,"line_start":93,"line_end":93,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389194,"byte_end":389197,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The lifetimes `'r` and `'t` in this crate correspond to the lifetime of a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389198,"byte_end":389275,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/ compiled regular expression and text to search, respectively.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389276,"byte_end":389341,"line_start":96,"line_end":96,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389342,"byte_end":389345,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ The only methods that allocate new strings are the string replacement","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389346,"byte_end":389419,"line_start":98,"line_end":98,"column_start":1,"column_end":74}},{"value":"/ methods. All other methods (searching and splitting) return borrowed","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389420,"byte_end":389492,"line_start":99,"line_end":99,"column_start":1,"column_end":73}},{"value":"/ pointers into the string given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389493,"byte_end":389528,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389529,"byte_end":389532,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389533,"byte_end":389547,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389548,"byte_end":389551,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Find the location of a US phone number:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389552,"byte_end":389595,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389596,"byte_end":389599,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389600,"byte_end":389611,"line_start":106,"line_end":106,"column_start":1,"column_end":12}},{"value":"/ # use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389612,"byte_end":389635,"line_start":107,"line_end":107,"column_start":1,"column_end":24}},{"value":"/ let re = Regex::new(\"[0-9]{3}-[0-9]{3}-[0-9]{4}\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389636,"byte_end":389699,"line_start":108,"line_end":108,"column_start":1,"column_end":64}},{"value":"/ let mat = re.find(\"phone: 111-222-3333\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389700,"byte_end":389754,"line_start":109,"line_end":109,"column_start":1,"column_end":55}},{"value":"/ assert_eq!((mat.start(), mat.end()), (7, 19));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389755,"byte_end":389805,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389806,"byte_end":389813,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389814,"byte_end":389817,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ # Using the `std::str::pattern` methods with `Regex`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389818,"byte_end":389874,"line_start":113,"line_end":113,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389875,"byte_end":389878,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ > **Note**: This section requires that this crate is compiled with the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389879,"byte_end":389953,"line_start":115,"line_end":115,"column_start":1,"column_end":75}},{"value":"/ > `pattern` Cargo feature enabled, which **requires nightly Rust**.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":389954,"byte_end":390025,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390026,"byte_end":390029,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Since `Regex` implements `Pattern`, you can use regexes with methods","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390030,"byte_end":390102,"line_start":118,"line_end":118,"column_start":1,"column_end":73}},{"value":"/ defined on `&str`. For example, `is_match`, `find`, `find_iter`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390103,"byte_end":390170,"line_start":119,"line_end":119,"column_start":1,"column_end":68}},{"value":"/ and `split` can be replaced with `str::contains`, `str::find`,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390171,"byte_end":390237,"line_start":120,"line_end":120,"column_start":1,"column_end":67}},{"value":"/ `str::match_indices` and `str::split`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390238,"byte_end":390280,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390281,"byte_end":390284,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Here are some examples:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390285,"byte_end":390312,"line_start":123,"line_end":123,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390313,"byte_end":390316,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390317,"byte_end":390335,"line_start":125,"line_end":125,"column_start":1,"column_end":19}},{"value":"/ # use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390336,"byte_end":390359,"line_start":126,"line_end":126,"column_start":1,"column_end":24}},{"value":"/ let re = Regex::new(r\"\\d+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390360,"byte_end":390401,"line_start":127,"line_end":127,"column_start":1,"column_end":42}},{"value":"/ let haystack = \"a111b222c\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390402,"byte_end":390433,"line_start":128,"line_end":128,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390434,"byte_end":390437,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ assert!(haystack.contains(&re));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390438,"byte_end":390474,"line_start":130,"line_end":130,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(haystack.find(&re), Some(1));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390475,"byte_end":390519,"line_start":131,"line_end":131,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(haystack.match_indices(&re).collect::<Vec<_>>(),","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390520,"byte_end":390583,"line_start":132,"line_end":132,"column_start":1,"column_end":64}},{"value":"/            vec![(1, 4), (5, 8)]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390584,"byte_end":390621,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(haystack.split(&re).collect::<Vec<_>>(), vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390622,"byte_end":390699,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390700,"byte_end":390707,"line_start":135,"line_end":135,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391683,"byte_end":391686,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"pub fn new(&str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[{"value":"/ Compiles a regular expression. Once compiled, it can be used repeatedly","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391464,"byte_end":391539,"line_start":171,"line_end":171,"column_start":5,"column_end":80}},{"value":"/ to search, split or replace text in a string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391544,"byte_end":391593,"line_start":172,"line_end":172,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391598,"byte_end":391601,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ If an invalid expression is given, then an error is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391606,"byte_end":391671,"line_start":174,"line_end":174,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392416,"byte_end":392424,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"pub fn is_match(&Self, &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[{"value":"/ Returns true if and only if the regex matches the string given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391772,"byte_end":391839,"line_start":179,"line_end":179,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391844,"byte_end":391847,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ It is recommended to use this method if all you need to do is test","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391852,"byte_end":391922,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"/ a match, since the underlying matching engine may be able to do less","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391927,"byte_end":391999,"line_start":182,"line_end":182,"column_start":5,"column_end":77}},{"value":"/ work.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392004,"byte_end":392013,"line_start":183,"line_end":183,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392018,"byte_end":392021,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392026,"byte_end":392039,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392044,"byte_end":392047,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Test if some text contains at least one word with exactly 13","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392052,"byte_end":392116,"line_start":187,"line_end":187,"column_start":5,"column_end":69}},{"value":"/ Unicode word characters:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392121,"byte_end":392149,"line_start":188,"line_end":188,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392154,"byte_end":392157,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392162,"byte_end":392173,"line_start":190,"line_end":190,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392178,"byte_end":392221,"line_start":191,"line_end":191,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392226,"byte_end":392243,"line_start":192,"line_end":192,"column_start":5,"column_end":22}},{"value":"/ let text = \"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392248,"byte_end":392312,"line_start":193,"line_end":193,"column_start":5,"column_end":69}},{"value":"/ assert!(Regex::new(r\"\\b\\w{13}\\b\").unwrap().is_match(text));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392317,"byte_end":392380,"line_start":194,"line_end":194,"column_start":5,"column_end":68}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392385,"byte_end":392392,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392397,"byte_end":392404,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393300,"byte_end":393304,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"pub fn find<'t>(&Self, &'t str) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the start and end byte range of the leftmost-first match in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392499,"byte_end":392570,"line_start":201,"line_end":201,"column_start":5,"column_end":76}},{"value":"/ `text`. If no match exists, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392575,"byte_end":392631,"line_start":202,"line_end":202,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392636,"byte_end":392639,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Note that this should only be used if you want to discover the position","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392644,"byte_end":392719,"line_start":204,"line_end":204,"column_start":5,"column_end":80}},{"value":"/ of the match. Testing the existence of a match is faster if you use","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392724,"byte_end":392795,"line_start":205,"line_end":205,"column_start":5,"column_end":76}},{"value":"/ `is_match`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392800,"byte_end":392815,"line_start":206,"line_end":206,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392820,"byte_end":392823,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392828,"byte_end":392841,"line_start":208,"line_end":208,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392846,"byte_end":392849,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of the first word with exactly 13","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392854,"byte_end":392923,"line_start":210,"line_end":210,"column_start":5,"column_end":74}},{"value":"/ Unicode word characters:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392928,"byte_end":392956,"line_start":211,"line_end":211,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392961,"byte_end":392964,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392969,"byte_end":392980,"line_start":213,"line_end":213,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":392985,"byte_end":393028,"line_start":214,"line_end":214,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393033,"byte_end":393050,"line_start":215,"line_end":215,"column_start":5,"column_end":22}},{"value":"/ let text = \"I categorically deny having triskaidekaphobia.\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393055,"byte_end":393119,"line_start":216,"line_end":216,"column_start":5,"column_end":69}},{"value":"/ let mat = Regex::new(r\"\\b\\w{13}\\b\").unwrap().find(text).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393124,"byte_end":393193,"line_start":217,"line_end":217,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(mat.start(), 2);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393198,"byte_end":393229,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(mat.end(), 15);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393234,"byte_end":393264,"line_start":219,"line_end":219,"column_start":5,"column_end":35}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393269,"byte_end":393276,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393281,"byte_end":393288,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394018,"byte_end":394027,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"pub fn find_iter<'r, 't>(&'r Self, &'t str) -> Matches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[{"value":"/ Returns an iterator for each successive non-overlapping match in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393395,"byte_end":393463,"line_start":226,"line_end":226,"column_start":5,"column_end":73}},{"value":"/ `text`, returning the start and end byte indices with respect to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393468,"byte_end":393536,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"/ `text`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393541,"byte_end":393552,"line_start":228,"line_end":228,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393557,"byte_end":393560,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393565,"byte_end":393578,"line_start":230,"line_end":230,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393583,"byte_end":393586,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Find the start and end location of every word with exactly 13 Unicode","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393591,"byte_end":393664,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"/ word characters:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393669,"byte_end":393689,"line_start":233,"line_end":233,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393694,"byte_end":393697,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393702,"byte_end":393713,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393718,"byte_end":393761,"line_start":236,"line_end":236,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393766,"byte_end":393783,"line_start":237,"line_end":237,"column_start":5,"column_end":22}},{"value":"/ let text = \"Retroactively relinquishing remunerations is reprehensible.\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393788,"byte_end":393865,"line_start":238,"line_end":238,"column_start":5,"column_end":82}},{"value":"/ for mat in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393870,"byte_end":393937,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/     println!(\"{:?}\", mat);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393942,"byte_end":393972,"line_start":240,"line_end":240,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393977,"byte_end":393982,"line_start":241,"line_end":241,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393987,"byte_end":393994,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":393999,"byte_end":394006,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397107,"byte_end":397115,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"pub fn captures<'t>(&Self, &'t str) -> Option<Captures>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the capture groups corresponding to the leftmost-first","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394148,"byte_end":394214,"line_start":248,"line_end":248,"column_start":5,"column_end":71}},{"value":"/ match in `text`. Capture group `0` always corresponds to the entire","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394219,"byte_end":394290,"line_start":249,"line_end":249,"column_start":5,"column_end":76}},{"value":"/ match. If no match is found, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394295,"byte_end":394352,"line_start":250,"line_end":250,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394357,"byte_end":394360,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ You should only use `captures` if you need access to the location of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394365,"byte_end":394437,"line_start":252,"line_end":252,"column_start":5,"column_end":77}},{"value":"/ capturing group matches. Otherwise, `find` is faster for discovering","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394442,"byte_end":394514,"line_start":253,"line_end":253,"column_start":5,"column_end":77}},{"value":"/ the location of the overall match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394519,"byte_end":394557,"line_start":254,"line_end":254,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394562,"byte_end":394565,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394570,"byte_end":394584,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394589,"byte_end":394592,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Say you have some text with movie names and their release years,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394597,"byte_end":394665,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/ like \"'Citizen Kane' (1941)\". It'd be nice if we could search for text","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394670,"byte_end":394744,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ looking like that, while also extracting the movie name and its release","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394749,"byte_end":394824,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/ year separately.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394829,"byte_end":394849,"line_start":261,"line_end":261,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394854,"byte_end":394857,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394862,"byte_end":394873,"line_start":263,"line_end":263,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394878,"byte_end":394921,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394926,"byte_end":394943,"line_start":265,"line_end":265,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":394948,"byte_end":395009,"line_start":266,"line_end":266,"column_start":5,"column_end":66}},{"value":"/ let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395014,"byte_end":395077,"line_start":267,"line_end":267,"column_start":5,"column_end":68}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395082,"byte_end":395124,"line_start":268,"line_end":268,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395129,"byte_end":395191,"line_start":269,"line_end":269,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395196,"byte_end":395250,"line_start":270,"line_end":270,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395255,"byte_end":395326,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ // You can also access the groups by index using the Index notation.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395331,"byte_end":395403,"line_start":272,"line_end":272,"column_start":5,"column_end":77}},{"value":"/ // Note that this will panic on an invalid index.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395408,"byte_end":395461,"line_start":273,"line_end":273,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(&caps[1], \"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395466,"byte_end":395507,"line_start":274,"line_end":274,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(&caps[2], \"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395512,"byte_end":395545,"line_start":275,"line_end":275,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395550,"byte_end":395600,"line_start":276,"line_end":276,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395605,"byte_end":395612,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395617,"byte_end":395624,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395629,"byte_end":395632,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ Note that the full match is at capture group `0`. Each subsequent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395637,"byte_end":395706,"line_start":280,"line_end":280,"column_start":5,"column_end":74}},{"value":"/ capture group is indexed by the order of its opening `(`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395711,"byte_end":395772,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395777,"byte_end":395780,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ We can make this example a bit clearer by using *named* capture groups:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395785,"byte_end":395860,"line_start":283,"line_end":283,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395865,"byte_end":395868,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395873,"byte_end":395884,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395889,"byte_end":395932,"line_start":286,"line_end":286,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395937,"byte_end":395954,"line_start":287,"line_end":287,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":395959,"byte_end":396027,"line_start":288,"line_end":288,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396032,"byte_end":396061,"line_start":289,"line_end":289,"column_start":5,"column_end":34}},{"value":"/ let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396066,"byte_end":396129,"line_start":290,"line_end":290,"column_start":5,"column_end":68}},{"value":"/ let caps = re.captures(text).unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396134,"byte_end":396176,"line_start":291,"line_end":291,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396181,"byte_end":396250,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396255,"byte_end":396315,"line_start":293,"line_end":293,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396320,"byte_end":396391,"line_start":294,"line_end":294,"column_start":5,"column_end":76}},{"value":"/ // You can also access the groups by name using the Index notation.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396396,"byte_end":396467,"line_start":295,"line_end":295,"column_start":5,"column_end":76}},{"value":"/ // Note that this will panic on an invalid group name.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396472,"byte_end":396530,"line_start":296,"line_end":296,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(&caps[\"title\"], \"Citizen Kane\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396535,"byte_end":396582,"line_start":297,"line_end":297,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(&caps[\"year\"], \"1941\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396587,"byte_end":396625,"line_start":298,"line_end":298,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396630,"byte_end":396680,"line_start":299,"line_end":299,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396685,"byte_end":396688,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396693,"byte_end":396700,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396705,"byte_end":396712,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396717,"byte_end":396720,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Here we name the capture groups, which we can access with the `name`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396725,"byte_end":396797,"line_start":304,"line_end":304,"column_start":5,"column_end":77}},{"value":"/ method or the `Index` notation with a `&str`. Note that the named","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396802,"byte_end":396871,"line_start":305,"line_end":305,"column_start":5,"column_end":74}},{"value":"/ capture groups are still accessible with `get` or the `Index` notation","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396876,"byte_end":396950,"line_start":306,"line_end":306,"column_start":5,"column_end":79}},{"value":"/ with a `usize`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396955,"byte_end":396974,"line_start":307,"line_end":307,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396979,"byte_end":396982,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The `0`th capture group is always unnamed, so it must always be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":396987,"byte_end":397054,"line_start":309,"line_end":309,"column_start":5,"column_end":72}},{"value":"/ accessed with `get(0)` or `[0]`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397059,"byte_end":397095,"line_start":310,"line_end":310,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398448,"byte_end":398461,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"pub fn captures_iter<'r, 't>(&'r Self, &'t str) -> CaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[{"value":"/ Returns an iterator over all the non-overlapping capture groups matched","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397424,"byte_end":397499,"line_start":320,"line_end":320,"column_start":5,"column_end":80}},{"value":"/ in `text`. This is operationally the same as `find_iter`, except it","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397504,"byte_end":397575,"line_start":321,"line_end":321,"column_start":5,"column_end":76}},{"value":"/ yields information about capturing group matches.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397580,"byte_end":397633,"line_start":322,"line_end":322,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397638,"byte_end":397641,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397646,"byte_end":397659,"line_start":324,"line_end":324,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397664,"byte_end":397667,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ We can use this to find all movie titles and their release years in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397672,"byte_end":397743,"line_start":326,"line_end":326,"column_start":5,"column_end":76}},{"value":"/ some text, where the movie is formatted like \"'Title' (xxxx)\":","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397748,"byte_end":397814,"line_start":327,"line_end":327,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397819,"byte_end":397822,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397827,"byte_end":397838,"line_start":329,"line_end":329,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397843,"byte_end":397886,"line_start":330,"line_end":330,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397891,"byte_end":397908,"line_start":331,"line_end":331,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397913,"byte_end":397981,"line_start":332,"line_end":332,"column_start":5,"column_end":73}},{"value":"/                .unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":397986,"byte_end":398015,"line_start":333,"line_end":333,"column_start":5,"column_end":34}},{"value":"/ let text = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398020,"byte_end":398099,"line_start":334,"line_end":334,"column_start":5,"column_end":84}},{"value":"/ for caps in re.captures_iter(text) {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398104,"byte_end":398144,"line_start":335,"line_end":335,"column_start":5,"column_end":45}},{"value":"/     println!(\"Movie: {:?}, Released: {:?}\",","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398149,"byte_end":398196,"line_start":336,"line_end":336,"column_start":5,"column_end":52}},{"value":"/              &caps[\"title\"], &caps[\"year\"]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398201,"byte_end":398249,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398254,"byte_end":398259,"line_start":338,"line_end":338,"column_start":5,"column_end":10}},{"value":"/ // Output:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398264,"byte_end":398278,"line_start":339,"line_end":339,"column_start":5,"column_end":19}},{"value":"/ // Movie: Citizen Kane, Released: 1941","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398283,"byte_end":398325,"line_start":340,"line_end":340,"column_start":5,"column_end":47}},{"value":"/ // Movie: The Wizard of Oz, Released: 1939","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398330,"byte_end":398376,"line_start":341,"line_end":341,"column_start":5,"column_end":51}},{"value":"/ // Movie: M, Released: 1931","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398381,"byte_end":398412,"line_start":342,"line_end":342,"column_start":5,"column_end":36}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398417,"byte_end":398424,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398429,"byte_end":398436,"line_start":344,"line_end":344,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399320,"byte_end":399325,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"pub fn split<'r, 't>(&'r Self, &'t str) -> Split","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[{"value":"/ Returns an iterator of substrings of `text` delimited by a match of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398623,"byte_end":398698,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/ regular expression. Namely, each element of the iterator corresponds to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398703,"byte_end":398778,"line_start":353,"line_end":353,"column_start":5,"column_end":80}},{"value":"/ text that *isn't* matched by the regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398783,"byte_end":398839,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398844,"byte_end":398847,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398852,"byte_end":398899,"line_start":356,"line_end":356,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398904,"byte_end":398907,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398912,"byte_end":398925,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398930,"byte_end":398933,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ To split a string delimited by arbitrary amounts of spaces or tabs:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":398938,"byte_end":399009,"line_start":360,"line_end":360,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399014,"byte_end":399017,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399022,"byte_end":399033,"line_start":362,"line_end":362,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399038,"byte_end":399081,"line_start":363,"line_end":363,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399086,"byte_end":399103,"line_start":364,"line_end":364,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"[ \\t]+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399108,"byte_end":399152,"line_start":365,"line_end":365,"column_start":5,"column_end":49}},{"value":"/ let fields: Vec<&str> = re.split(\"a b \\t  c\\td    e\").collect();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399157,"byte_end":399225,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399230,"byte_end":399284,"line_start":367,"line_end":367,"column_start":5,"column_end":59}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399289,"byte_end":399296,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399301,"byte_end":399308,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400313,"byte_end":400319,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"pub fn splitn<'r, 't>(&'r Self, &'t str, usize) -> SplitN","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of `text` delimited","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399478,"byte_end":399551,"line_start":377,"line_end":377,"column_start":5,"column_end":78}},{"value":"/ by a match of the regular expression. (A `limit` of `0` will return no","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399556,"byte_end":399630,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ substrings.) Namely, each element of the iterator corresponds to text","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399635,"byte_end":399708,"line_start":379,"line_end":379,"column_start":5,"column_end":78}},{"value":"/ that *isn't* matched by the regular expression. The remainder of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399713,"byte_end":399785,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ string that is not split will be the last element in the iterator.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399790,"byte_end":399860,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399865,"byte_end":399868,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ This method will *not* copy the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399873,"byte_end":399920,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399925,"byte_end":399928,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399933,"byte_end":399946,"line_start":385,"line_end":385,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399951,"byte_end":399954,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Get the first two words in some text:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":399959,"byte_end":400000,"line_start":387,"line_end":387,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400005,"byte_end":400008,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400013,"byte_end":400024,"line_start":389,"line_end":389,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400029,"byte_end":400072,"line_start":390,"line_end":390,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400077,"byte_end":400094,"line_start":391,"line_end":391,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"\\W+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400099,"byte_end":400140,"line_start":392,"line_end":392,"column_start":5,"column_end":46}},{"value":"/ let fields: Vec<&str> = re.splitn(\"Hey! How are you?\", 3).collect();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400145,"byte_end":400217,"line_start":393,"line_end":393,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(fields, vec!(\"Hey\", \"How\", \"are you?\"));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400222,"byte_end":400277,"line_start":394,"line_end":394,"column_start":5,"column_end":60}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400282,"byte_end":400289,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400294,"byte_end":400301,"line_start":396,"line_end":396,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404856,"byte_end":404863,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"pub fn replace<'t, R: Replacer>(&Self, &'t str, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[{"value":"/ Replaces the leftmost-first match with the replacement provided.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400510,"byte_end":400578,"line_start":405,"line_end":405,"column_start":5,"column_end":73}},{"value":"/ The replacement can be a regular string (where `$N` and `$name` are","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400583,"byte_end":400654,"line_start":406,"line_end":406,"column_start":5,"column_end":76}},{"value":"/ expanded to match capture groups) or a function that takes the matches'","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400659,"byte_end":400734,"line_start":407,"line_end":407,"column_start":5,"column_end":80}},{"value":"/ `Captures` and returns the replaced string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400739,"byte_end":400786,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400791,"byte_end":400794,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If no match is found, then a copy of the string is returned unchanged.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400799,"byte_end":400873,"line_start":410,"line_end":410,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400878,"byte_end":400881,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Replacement string syntax","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400886,"byte_end":400917,"line_start":412,"line_end":412,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400922,"byte_end":400925,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ All instances of `$name` in the replacement text is replaced with the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":400930,"byte_end":401003,"line_start":414,"line_end":414,"column_start":5,"column_end":78}},{"value":"/ corresponding capture group `name`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401008,"byte_end":401047,"line_start":415,"line_end":415,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401052,"byte_end":401055,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401060,"byte_end":401122,"line_start":417,"line_end":417,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401127,"byte_end":401202,"line_start":418,"line_end":418,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401207,"byte_end":401278,"line_start":419,"line_end":419,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401283,"byte_end":401339,"line_start":420,"line_end":420,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401344,"byte_end":401347,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401352,"byte_end":401425,"line_start":422,"line_end":422,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401430,"byte_end":401501,"line_start":423,"line_end":423,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401506,"byte_end":401509,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401514,"byte_end":401585,"line_start":425,"line_end":425,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401590,"byte_end":401664,"line_start":426,"line_end":426,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401669,"byte_end":401730,"line_start":427,"line_end":427,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401735,"byte_end":401738,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401743,"byte_end":401779,"line_start":429,"line_end":429,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401784,"byte_end":401787,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401792,"byte_end":401806,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401811,"byte_end":401814,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ Note that this function is polymorphic with respect to the replacement.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401819,"byte_end":401894,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/ In typical usage, this can just be a normal string:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401899,"byte_end":401954,"line_start":434,"line_end":434,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401959,"byte_end":401962,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401967,"byte_end":401978,"line_start":436,"line_end":436,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":401983,"byte_end":402026,"line_start":437,"line_end":437,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402031,"byte_end":402048,"line_start":438,"line_end":438,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(\"[^01]+\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402053,"byte_end":402096,"line_start":439,"line_end":439,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(re.replace(\"1078910\", \"\"), \"1010\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402101,"byte_end":402151,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402156,"byte_end":402163,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402168,"byte_end":402175,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402180,"byte_end":402183,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ But anything satisfying the `Replacer` trait will work. For example,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402188,"byte_end":402260,"line_start":444,"line_end":444,"column_start":5,"column_end":77}},{"value":"/ a closure of type `|&Captures| -> String` provides direct access to the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402265,"byte_end":402340,"line_start":445,"line_end":445,"column_start":5,"column_end":80}},{"value":"/ captures corresponding to a match. This allows one to access","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402345,"byte_end":402409,"line_start":446,"line_end":446,"column_start":5,"column_end":69}},{"value":"/ capturing group matches easily:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402414,"byte_end":402449,"line_start":447,"line_end":447,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402454,"byte_end":402457,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402462,"byte_end":402473,"line_start":449,"line_end":449,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402478,"byte_end":402521,"line_start":450,"line_end":450,"column_start":5,"column_end":48}},{"value":"/ # use regex::Captures; fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402526,"byte_end":402564,"line_start":451,"line_end":451,"column_start":5,"column_end":43}},{"value":"/ let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402569,"byte_end":402625,"line_start":452,"line_end":452,"column_start":5,"column_end":61}},{"value":"/ let result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402630,"byte_end":402699,"line_start":453,"line_end":453,"column_start":5,"column_end":74}},{"value":"/     format!(\"{} {}\", &caps[2], &caps[1])","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402704,"byte_end":402748,"line_start":454,"line_end":454,"column_start":5,"column_end":49}},{"value":"/ });","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402753,"byte_end":402760,"line_start":455,"line_end":455,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(result, \"Bruce Springsteen\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402765,"byte_end":402809,"line_start":456,"line_end":456,"column_start":5,"column_end":49}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402814,"byte_end":402821,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402826,"byte_end":402833,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402838,"byte_end":402841,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ But this is a bit cumbersome to use all the time. Instead, a simple","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402846,"byte_end":402917,"line_start":460,"line_end":460,"column_start":5,"column_end":76}},{"value":"/ syntax is supported that expands `$name` into the corresponding capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":402922,"byte_end":402997,"line_start":461,"line_end":461,"column_start":5,"column_end":80}},{"value":"/ group. Here's the last example, but using this expansion technique","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403002,"byte_end":403072,"line_start":462,"line_end":462,"column_start":5,"column_end":75}},{"value":"/ with named capture groups:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403077,"byte_end":403107,"line_start":463,"line_end":463,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403112,"byte_end":403115,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403120,"byte_end":403131,"line_start":465,"line_end":465,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403136,"byte_end":403179,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403184,"byte_end":403201,"line_start":467,"line_end":467,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403206,"byte_end":403279,"line_start":468,"line_end":468,"column_start":5,"column_end":78}},{"value":"/ let result = re.replace(\"Springsteen, Bruce\", \"$first $last\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403284,"byte_end":403350,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(result, \"Bruce Springsteen\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403355,"byte_end":403399,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403404,"byte_end":403411,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403416,"byte_end":403423,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403428,"byte_end":403431,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Note that using `$2` instead of `$first` or `$1` instead of `$last`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403436,"byte_end":403507,"line_start":474,"line_end":474,"column_start":5,"column_end":76}},{"value":"/ would produce the same result. To write a literal `$` use `$$`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403512,"byte_end":403579,"line_start":475,"line_end":475,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403584,"byte_end":403587,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Sometimes the replacement string requires use of curly braces to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403592,"byte_end":403660,"line_start":477,"line_end":477,"column_start":5,"column_end":73}},{"value":"/ delineate a capture group replacement and surrounding literal text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403665,"byte_end":403736,"line_start":478,"line_end":478,"column_start":5,"column_end":76}},{"value":"/ For example, if we wanted to join two words together with an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403741,"byte_end":403805,"line_start":479,"line_end":479,"column_start":5,"column_end":69}},{"value":"/ underscore:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403810,"byte_end":403825,"line_start":480,"line_end":480,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403830,"byte_end":403833,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403838,"byte_end":403849,"line_start":482,"line_end":482,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403854,"byte_end":403897,"line_start":483,"line_end":483,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403902,"byte_end":403919,"line_start":484,"line_end":484,"column_start":5,"column_end":22}},{"value":"/ let re = Regex::new(r\"(?P<first>\\w+)\\s+(?P<second>\\w+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403924,"byte_end":403994,"line_start":485,"line_end":485,"column_start":5,"column_end":75}},{"value":"/ let result = re.replace(\"deep fried\", \"${first}_$second\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":403999,"byte_end":404061,"line_start":486,"line_end":486,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(result, \"deep_fried\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404066,"byte_end":404103,"line_start":487,"line_end":487,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404108,"byte_end":404115,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404120,"byte_end":404127,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404132,"byte_end":404135,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ Without the curly braces, the capture group name `first_` would be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404140,"byte_end":404210,"line_start":491,"line_end":491,"column_start":5,"column_end":75}},{"value":"/ used, and since it doesn't exist, it would be replaced with the empty","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404215,"byte_end":404288,"line_start":492,"line_end":492,"column_start":5,"column_end":78}},{"value":"/ string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404293,"byte_end":404304,"line_start":493,"line_end":493,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404309,"byte_end":404312,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Finally, sometimes you just want to replace a literal string with no","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404317,"byte_end":404389,"line_start":495,"line_end":495,"column_start":5,"column_end":77}},{"value":"/ regard for capturing group expansion. This can be done by wrapping a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404394,"byte_end":404466,"line_start":496,"line_end":496,"column_start":5,"column_end":77}},{"value":"/ byte string with `NoExpand`:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404471,"byte_end":404503,"line_start":497,"line_end":497,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404508,"byte_end":404511,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404516,"byte_end":404527,"line_start":499,"line_end":499,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404532,"byte_end":404575,"line_start":500,"line_end":500,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404580,"byte_end":404597,"line_start":501,"line_end":501,"column_start":5,"column_end":22}},{"value":"/ use regex::NoExpand;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404602,"byte_end":404626,"line_start":502,"line_end":502,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404631,"byte_end":404634,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(\\S+)\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404639,"byte_end":404703,"line_start":504,"line_end":504,"column_start":5,"column_end":69}},{"value":"/ let result = re.replace(\"Springsteen, Bruce\", NoExpand(\"$2 $last\"));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404708,"byte_end":404780,"line_start":505,"line_end":505,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(result, \"$2 $last\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404785,"byte_end":404820,"line_start":506,"line_end":506,"column_start":5,"column_end":40}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404825,"byte_end":404832,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":404837,"byte_end":404844,"line_start":508,"line_end":508,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405320,"byte_end":405331,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"pub fn replace_all<'t, R: Replacer>(&Self, &'t str, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[{"value":"/ Replaces all non-overlapping matches in `text` with the replacement","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405007,"byte_end":405078,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"/ provided. This is the same as calling `replacen` with `limit` set to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405083,"byte_end":405155,"line_start":518,"line_end":518,"column_start":5,"column_end":77}},{"value":"/ `0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405160,"byte_end":405168,"line_start":519,"line_end":519,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405173,"byte_end":405176,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405181,"byte_end":405249,"line_start":521,"line_end":521,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405254,"byte_end":405308,"line_start":522,"line_end":522,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405800,"byte_end":405808,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"pub fn replacen<'t, R: Replacer>(&Self, &'t str, usize, R) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[{"value":"/ Replaces at most `limit` non-overlapping matches in `text` with the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405475,"byte_end":405546,"line_start":531,"line_end":531,"column_start":5,"column_end":76}},{"value":"/ replacement provided. If `limit` is 0, then all non-overlapping matches","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405551,"byte_end":405626,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"/ are replaced.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405631,"byte_end":405648,"line_start":533,"line_end":533,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405653,"byte_end":405656,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `replace` for details on how to access","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405661,"byte_end":405729,"line_start":535,"line_end":535,"column_start":5,"column_end":73}},{"value":"/ capturing group matches in the replacement string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":405734,"byte_end":405788,"line_start":536,"line_end":536,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408764,"byte_end":408778,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"pub fn shortest_match(&Self, &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[{"value":"/ Returns the end location of a match in the text given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":407983,"byte_end":408041,"line_start":596,"line_end":596,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408046,"byte_end":408049,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ This method may have the same performance characteristics as","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408054,"byte_end":408118,"line_start":598,"line_end":598,"column_start":5,"column_end":69}},{"value":"/ `is_match`, except it provides an end location for a match. In","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408123,"byte_end":408189,"line_start":599,"line_end":599,"column_start":5,"column_end":71}},{"value":"/ particular, the location returned *may be shorter* than the proper end","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408194,"byte_end":408268,"line_start":600,"line_end":600,"column_start":5,"column_end":79}},{"value":"/ of the leftmost-first match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408273,"byte_end":408305,"line_start":601,"line_end":601,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408310,"byte_end":408313,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408318,"byte_end":408331,"line_start":603,"line_end":603,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408336,"byte_end":408339,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Typically, `a+` would match the entire first sequence of `a` in some","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408344,"byte_end":408416,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/ text, but `shortest_match` can give up as soon as it sees the first","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408421,"byte_end":408492,"line_start":606,"line_end":606,"column_start":5,"column_end":76}},{"value":"/ `a`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408497,"byte_end":408505,"line_start":607,"line_end":607,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408510,"byte_end":408513,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408518,"byte_end":408529,"line_start":609,"line_end":609,"column_start":5,"column_end":16}},{"value":"/ # extern crate regex; use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408534,"byte_end":408577,"line_start":610,"line_end":610,"column_start":5,"column_end":48}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408582,"byte_end":408599,"line_start":611,"line_end":611,"column_start":5,"column_end":22}},{"value":"/ let text = \"aaaaa\";","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408604,"byte_end":408627,"line_start":612,"line_end":612,"column_start":5,"column_end":28}},{"value":"/ let pos = Regex::new(r\"a+\").unwrap().shortest_match(text);","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408632,"byte_end":408694,"line_start":613,"line_end":613,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(pos, Some(1));","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408699,"byte_end":408728,"line_start":614,"line_end":614,"column_start":5,"column_end":34}},{"value":"/ # }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408733,"byte_end":408740,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408745,"byte_end":408752,"line_start":616,"line_end":616,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409165,"byte_end":409182,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"pub fn shortest_match_at(&Self, &str, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as shortest_match, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408868,"byte_end":408942,"line_start":621,"line_end":621,"column_start":5,"column_end":79}},{"value":"/ offset.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408947,"byte_end":408958,"line_start":622,"line_end":622,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408963,"byte_end":408966,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":408971,"byte_end":409046,"line_start":624,"line_end":624,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409051,"byte_end":409120,"line_start":625,"line_end":625,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409125,"byte_end":409153,"line_start":626,"line_end":626,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409629,"byte_end":409640,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"pub fn is_match_at(&Self, &str, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as is_match, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409338,"byte_end":409406,"line_start":635,"line_end":635,"column_start":5,"column_end":73}},{"value":"/ offset.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409411,"byte_end":409422,"line_start":636,"line_end":636,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409427,"byte_end":409430,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409435,"byte_end":409510,"line_start":638,"line_end":638,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409515,"byte_end":409584,"line_start":639,"line_end":639,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409589,"byte_end":409617,"line_start":640,"line_end":640,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410036,"byte_end":410043,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"pub fn find_at<'t>(&Self, &'t str, usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"/ Returns the same as find, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409749,"byte_end":409813,"line_start":645,"line_end":645,"column_start":5,"column_end":69}},{"value":"/ offset.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409818,"byte_end":409829,"line_start":646,"line_end":646,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409834,"byte_end":409837,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409842,"byte_end":409917,"line_start":648,"line_end":648,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409922,"byte_end":409991,"line_start":649,"line_end":649,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":409996,"byte_end":410024,"line_start":650,"line_end":650,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410705,"byte_end":410718,"line_start":671,"line_end":671,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"pub fn captures_read<'t>(&Self, &mut CaptureLocations, &'t str)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[{"value":"/ This is like `captures`, but uses","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410261,"byte_end":410298,"line_start":661,"line_end":661,"column_start":5,"column_end":42}},{"value":"/ [`CaptureLocations`](struct.CaptureLocations.html)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410303,"byte_end":410357,"line_start":662,"line_end":662,"column_start":5,"column_end":59}},{"value":"/ instead of","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410362,"byte_end":410376,"line_start":663,"line_end":663,"column_start":5,"column_end":19}},{"value":"/ [`Captures`](struct.Captures.html) in order to amortize allocations.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410381,"byte_end":410453,"line_start":664,"line_end":664,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410458,"byte_end":410461,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ To create a `CaptureLocations` value, use the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410466,"byte_end":410515,"line_start":666,"line_end":666,"column_start":5,"column_end":54}},{"value":"/ `Regex::capture_locations` method.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410520,"byte_end":410558,"line_start":667,"line_end":667,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410563,"byte_end":410566,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ This returns the overall match if this was successful, which is always","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410571,"byte_end":410645,"line_start":669,"line_end":669,"column_start":5,"column_end":79}},{"value":"/ equivalence to the `0`th capture group.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410650,"byte_end":410693,"line_start":670,"line_end":670,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411217,"byte_end":411233,"line_start":685,"line_end":685,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"pub fn captures_read_at<'t>(&Self, &mut CaptureLocations, &'t str, usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[{"value":"/ Returns the same as captures, but starts the search at the given","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410884,"byte_end":410952,"line_start":679,"line_end":679,"column_start":5,"column_end":73}},{"value":"/ offset and populates the capture locations given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":410957,"byte_end":411010,"line_start":680,"line_end":680,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411015,"byte_end":411018,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ The significance of the starting point is that it takes the surrounding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411023,"byte_end":411098,"line_start":682,"line_end":682,"column_start":5,"column_end":80}},{"value":"/ context into consideration. For example, the `\\A` anchor can only","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411103,"byte_end":411172,"line_start":683,"line_end":683,"column_start":5,"column_end":74}},{"value":"/ match when `start == 0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411177,"byte_end":411205,"line_start":684,"line_end":684,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411781,"byte_end":411797,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"pub fn read_captures_at<'t>(&Self, &mut CaptureLocations, &'t str, usize)\n-> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[{"value":"/ An undocumented alias for `captures_read_at`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411525,"byte_end":411574,"line_start":697,"line_end":697,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411579,"byte_end":411582,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate previously used this routine, so to avoid","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411587,"byte_end":411655,"line_start":699,"line_end":699,"column_start":5,"column_end":73}},{"value":"/ breaking that crate, we continue to provide the name as an undocumented","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411660,"byte_end":411735,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/ alias.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":411740,"byte_end":411750,"line_start":701,"line_end":701,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412085,"byte_end":412091,"line_start":716,"line_end":716,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[{"value":"/ Returns the original string of this regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412027,"byte_end":412073,"line_start":715,"line_end":715,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412214,"byte_end":412227,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"pub fn capture_names(&Self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the capture names.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412155,"byte_end":412202,"line_start":720,"line_end":720,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412363,"byte_end":412375,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"pub fn captures_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[{"value":"/ Returns the number of captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412316,"byte_end":412351,"line_start":725,"line_end":725,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412586,"byte_end":412603,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"pub fn capture_locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[{"value":"/ Returns an empty set of capture locations that can be reused in","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412442,"byte_end":412509,"line_start":730,"line_end":730,"column_start":5,"column_end":72}},{"value":"/ multiple calls to `captures_read` or `captures_read_at`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412514,"byte_end":412574,"line_start":731,"line_end":731,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412954,"byte_end":412963,"line_start":741,"line_end":741,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"pub fn locations(&Self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[{"value":"/ An alias for `capture_locations` to preserve backward compatibility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412704,"byte_end":412776,"line_start":736,"line_end":736,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412781,"byte_end":412784,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ The `regex-capi` crate uses this method, so to avoid breaking that","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412789,"byte_end":412859,"line_start":738,"line_end":738,"column_start":5,"column_end":75}},{"value":"/ crate, we continue to export it as an undocumented API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412864,"byte_end":412923,"line_start":739,"line_end":739,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1194},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413319,"byte_end":413331,"line_start":752,"line_end":752,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[{"value":"/ An iterator over the names of all possible captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413062,"byte_end":413118,"line_start":746,"line_end":746,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413119,"byte_end":413122,"line_start":747,"line_end":747,"column_start":1,"column_end":4}},{"value":"/ `None` indicates an unnamed capture; the first element (capture 0, the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413123,"byte_end":413197,"line_start":748,"line_end":748,"column_start":1,"column_end":75}},{"value":"/ whole matched region) is always unnamed.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413198,"byte_end":413242,"line_start":749,"line_end":749,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413243,"byte_end":413246,"line_start":750,"line_end":750,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413247,"byte_end":413307,"line_start":751,"line_end":751,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1205},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413920,"byte_end":413925,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields all substrings delimited by a regular expression match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413722,"byte_end":413788,"line_start":769,"line_end":769,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413789,"byte_end":413792,"line_start":770,"line_end":770,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413793,"byte_end":413868,"line_start":771,"line_end":771,"column_start":1,"column_end":76}},{"value":"/ lifetime of the string being split.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413869,"byte_end":413908,"line_start":772,"line_end":772,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414901,"byte_end":414907,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1218},{"krate":0,"index":1219}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[{"value":"/ Yields at most `N` substrings delimited by a regular expression match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414626,"byte_end":414700,"line_start":802,"line_end":802,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414701,"byte_end":414704,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ The last substring will be whatever remains after splitting.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414705,"byte_end":414769,"line_start":804,"line_end":804,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414770,"byte_end":414773,"line_start":805,"line_end":805,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414774,"byte_end":414849,"line_start":806,"line_end":806,"column_start":1,"column_end":76}},{"value":"/ lifetime of the string being split.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414850,"byte_end":414889,"line_start":807,"line_end":807,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2394},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416113,"byte_end":416129,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[{"value":"/ CaptureLocations is a low level representation of the raw offsets of each","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415343,"byte_end":415420,"line_start":830,"line_end":830,"column_start":1,"column_end":78}},{"value":"/ submatch.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415421,"byte_end":415434,"line_start":831,"line_end":831,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415435,"byte_end":415438,"line_start":832,"line_end":832,"column_start":1,"column_end":4}},{"value":"/ You can think of this as a lower level","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415439,"byte_end":415481,"line_start":833,"line_end":833,"column_start":1,"column_end":43}},{"value":"/ [`Captures`](struct.Captures.html), where this type does not support","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415482,"byte_end":415554,"line_start":834,"line_end":834,"column_start":1,"column_end":73}},{"value":"/ named capturing groups directly and it does not borrow the text that these","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415555,"byte_end":415633,"line_start":835,"line_end":835,"column_start":1,"column_end":79}},{"value":"/ offsets were matched on.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415634,"byte_end":415662,"line_start":836,"line_end":836,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415663,"byte_end":415666,"line_start":837,"line_end":837,"column_start":1,"column_end":4}},{"value":"/ Primarily, this type is useful when using the lower level `Regex` APIs","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415667,"byte_end":415741,"line_start":838,"line_end":838,"column_start":1,"column_end":75}},{"value":"/ such as `read_captures`, which permits amortizing the allocation in which","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415742,"byte_end":415819,"line_start":839,"line_end":839,"column_start":1,"column_end":78}},{"value":"/ capture match locations are stored.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415820,"byte_end":415859,"line_start":840,"line_end":840,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415860,"byte_end":415863,"line_start":841,"line_end":841,"column_start":1,"column_end":4}},{"value":"/ In order to build a value of this type, you'll need to call the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415864,"byte_end":415931,"line_start":842,"line_end":842,"column_start":1,"column_end":68}},{"value":"/ `capture_locations` method on the `Regex` being used to execute the search.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":415932,"byte_end":416011,"line_start":843,"line_end":843,"column_start":1,"column_end":80}},{"value":"/ The value returned can then be reused in subsequent searches.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416012,"byte_end":416077,"line_start":844,"line_end":844,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416451,"byte_end":416460,"line_start":854,"line_end":854,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[{"value":"/ A type alias for `CaptureLocations` for backwards compatibility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416153,"byte_end":416221,"line_start":848,"line_end":848,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416222,"byte_end":416225,"line_start":849,"line_end":849,"column_start":1,"column_end":4}},{"value":"/ Previously, we exported `CaptureLocations` as `Locations` in an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416226,"byte_end":416293,"line_start":850,"line_end":850,"column_start":1,"column_end":68}},{"value":"/ undocumented API. To prevent breaking that code (e.g., in `regex-capi`),","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416294,"byte_end":416370,"line_start":851,"line_end":851,"column_start":1,"column_end":77}},{"value":"/ we continue re-exporting the same undocumented API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416371,"byte_end":416426,"line_start":852,"line_end":852,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416818,"byte_end":416821,"line_start":862,"line_end":862,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"pub fn get(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"/ Returns the start and end positions of the Nth capture group. Returns","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416510,"byte_end":416583,"line_start":857,"line_end":857,"column_start":5,"column_end":78}},{"value":"/ `None` if `i` is not a valid capture group or if the capture group did","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416588,"byte_end":416662,"line_start":858,"line_end":858,"column_start":5,"column_end":79}},{"value":"/ not match anything. The positions returned are *always* byte indices","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416667,"byte_end":416739,"line_start":859,"line_end":859,"column_start":5,"column_end":77}},{"value":"/ with respect to the original string matched.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416744,"byte_end":416792,"line_start":860,"line_end":860,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416797,"byte_end":416806,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417116,"byte_end":417119,"line_start":871,"line_end":871,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"/ Returns the total number of capturing groups.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416900,"byte_end":416949,"line_start":866,"line_end":866,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416954,"byte_end":416957,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1` since every regex has at least `1`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416962,"byte_end":417028,"line_start":868,"line_end":868,"column_start":5,"column_end":71}},{"value":"/ capturing group that corresponds to the entire match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417033,"byte_end":417090,"line_start":869,"line_end":869,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417095,"byte_end":417104,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417479,"byte_end":417482,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"pub fn pos(&Self, usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"/ An alias for the `get` method for backwards compatibility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417170,"byte_end":417232,"line_start":875,"line_end":875,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417237,"byte_end":417240,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Previously, we exported `get` as `pos` in an undocumented API. To","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417245,"byte_end":417314,"line_start":877,"line_end":877,"column_start":5,"column_end":74}},{"value":"/ prevent breaking that code (e.g., in `regex-capi`), we continue","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417319,"byte_end":417386,"line_start":878,"line_end":878,"column_start":5,"column_end":72}},{"value":"/ re-exporting the same undocumented API.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417391,"byte_end":417434,"line_start":879,"line_end":879,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417458,"byte_end":417467,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1230},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418106,"byte_end":418114,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[{"value":"/ Captures represents a group of captured strings for a single match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417557,"byte_end":417628,"line_start":887,"line_end":887,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417629,"byte_end":417632,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ The 0th capture always corresponds to the entire match. Each subsequent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417633,"byte_end":417708,"line_start":889,"line_end":889,"column_start":1,"column_end":76}},{"value":"/ index corresponds to the next capture group in the regex. If a capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417709,"byte_end":417783,"line_start":890,"line_end":890,"column_start":1,"column_end":75}},{"value":"/ group is named, then the matched string is *also* available via the `name`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417784,"byte_end":417862,"line_start":891,"line_end":891,"column_start":1,"column_end":79}},{"value":"/ method. (Note that the 0th capture is always unnamed and so must be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417863,"byte_end":417934,"line_start":892,"line_end":892,"column_start":1,"column_end":72}},{"value":"/ accessed with the `get` method.)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417935,"byte_end":417971,"line_start":893,"line_end":893,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417972,"byte_end":417975,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Positions returned from a capture group are always byte indices.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":417976,"byte_end":418044,"line_start":895,"line_end":895,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418045,"byte_end":418048,"line_start":896,"line_end":896,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418049,"byte_end":418094,"line_start":897,"line_end":897,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419012,"byte_end":419015,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"pub fn get(&Self, usize) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the match associated with the capture group at index `i`. If","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418249,"byte_end":418321,"line_start":905,"line_end":905,"column_start":5,"column_end":77}},{"value":"/ `i` does not correspond to a capture group, or if the capture group","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418326,"byte_end":418397,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"/ did not participate in the match, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418402,"byte_end":418464,"line_start":907,"line_end":907,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418469,"byte_end":418472,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418477,"byte_end":418491,"line_start":909,"line_end":909,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418496,"byte_end":418499,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ Get the text of the match with a default of an empty string if this","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418504,"byte_end":418575,"line_start":911,"line_end":911,"column_start":5,"column_end":76}},{"value":"/ group didn't participate in the match:","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418580,"byte_end":418622,"line_start":912,"line_end":912,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418627,"byte_end":418630,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418635,"byte_end":418646,"line_start":914,"line_end":914,"column_start":5,"column_end":16}},{"value":"/ # use regex::Regex;","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418651,"byte_end":418674,"line_start":915,"line_end":915,"column_start":5,"column_end":28}},{"value":"/ let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418679,"byte_end":418744,"line_start":916,"line_end":916,"column_start":5,"column_end":70}},{"value":"/ let caps = re.captures(\"abc123\").unwrap();","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418749,"byte_end":418795,"line_start":917,"line_end":917,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418800,"byte_end":418803,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ let text1 = caps.get(1).map_or(\"\", |m| m.as_str());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418808,"byte_end":418863,"line_start":919,"line_end":919,"column_start":5,"column_end":60}},{"value":"/ let text2 = caps.get(2).map_or(\"\", |m| m.as_str());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418868,"byte_end":418923,"line_start":920,"line_end":920,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(text1, \"123\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418928,"byte_end":418957,"line_start":921,"line_end":921,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(text2, \"\");","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418962,"byte_end":418988,"line_start":922,"line_end":922,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418993,"byte_end":419000,"line_start":923,"line_end":923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419300,"byte_end":419304,"line_start":930,"line_end":930,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"pub fn name(&Self, &str) -> Option<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Returns the match for the capture group named `name`. If `name` isn't a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419134,"byte_end":419209,"line_start":928,"line_end":928,"column_start":5,"column_end":80}},{"value":"/ valid capture group or didn't match anything, then `None` is returned.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419214,"byte_end":419288,"line_start":929,"line_end":929,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419736,"byte_end":419740,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"pub fn iter<'c>(&'c Self) -> SubCaptureMatches","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419421,"byte_end":419492,"line_start":934,"line_end":934,"column_start":5,"column_end":76}},{"value":"/ they appear in the regex. If a particular capture group didn't","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419497,"byte_end":419563,"line_start":935,"line_end":935,"column_start":5,"column_end":71}},{"value":"/ participate in the match, then `None` is yielded for that capture.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419568,"byte_end":419638,"line_start":936,"line_end":936,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419643,"byte_end":419646,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ The first match always corresponds to the overall match of the regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419651,"byte_end":419724,"line_start":938,"line_end":938,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420784,"byte_end":420790,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"pub fn expand(&Self, &str, &mut String)","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[{"value":"/ Expands all instances of `$name` in `replacement` to the corresponding","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419893,"byte_end":419967,"line_start":946,"line_end":946,"column_start":5,"column_end":79}},{"value":"/ capture group `name`, and writes them to the `dst` buffer given.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":419972,"byte_end":420040,"line_start":947,"line_end":947,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420045,"byte_end":420048,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ `name` may be an integer corresponding to the index of the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420053,"byte_end":420115,"line_start":949,"line_end":949,"column_start":5,"column_end":67}},{"value":"/ capture group (counted by order of opening parenthesis where `0` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420120,"byte_end":420195,"line_start":950,"line_end":950,"column_start":5,"column_end":80}},{"value":"/ entire match) or it can be a name (consisting of letters, digits or","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420200,"byte_end":420271,"line_start":951,"line_end":951,"column_start":5,"column_end":76}},{"value":"/ underscores) corresponding to a named capture group.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420276,"byte_end":420332,"line_start":952,"line_end":952,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420337,"byte_end":420340,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ If `name` isn't a valid capture group (whether the name doesn't exist","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420345,"byte_end":420418,"line_start":954,"line_end":954,"column_start":5,"column_end":78}},{"value":"/ or isn't a valid index), then it is replaced with the empty string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420423,"byte_end":420494,"line_start":955,"line_end":955,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420499,"byte_end":420502,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ The longest possible name is used. e.g., `$1a` looks up the capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420507,"byte_end":420578,"line_start":957,"line_end":957,"column_start":5,"column_end":76}},{"value":"/ group named `1a` and not the capture group at index `1`. To exert more","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420583,"byte_end":420657,"line_start":958,"line_end":958,"column_start":5,"column_end":79}},{"value":"/ precise control over the name, use braces, e.g., `${1}a`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420662,"byte_end":420723,"line_start":959,"line_end":959,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420728,"byte_end":420731,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ To write a literal `$` use `$$`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420736,"byte_end":420772,"line_start":961,"line_end":961,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421097,"byte_end":421100,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"/ Returns the number of captured groups.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420891,"byte_end":420933,"line_start":966,"line_end":966,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420938,"byte_end":420941,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ This is always at least `1`, since every regex has at least one capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":420946,"byte_end":421021,"line_start":968,"line_end":968,"column_start":5,"column_end":80}},{"value":"/ group that corresponds to the full match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421026,"byte_end":421071,"line_start":969,"line_end":969,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421076,"byte_end":421085,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1273},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423778,"byte_end":423795,"line_start":1053,"line_end":1053,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[{"value":"/ An iterator that yields all capturing matches in the order in which they","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423326,"byte_end":423402,"line_start":1044,"line_end":1044,"column_start":1,"column_end":77}},{"value":"/ appear in the regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423403,"byte_end":423427,"line_start":1045,"line_end":1045,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423428,"byte_end":423431,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ If a particular capture group didn't participate in the match, then `None`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423432,"byte_end":423510,"line_start":1047,"line_end":1047,"column_start":1,"column_end":79}},{"value":"/ is yielded for that capture. The first match always corresponds to the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423511,"byte_end":423585,"line_start":1048,"line_end":1048,"column_start":1,"column_end":75}},{"value":"/ overall match of the regex.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423586,"byte_end":423617,"line_start":1049,"line_end":1049,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423618,"byte_end":423621,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'c` corresponds to the lifetime of the `Captures` value, and","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423622,"byte_end":423700,"line_start":1051,"line_end":1051,"column_start":1,"column_end":79}},{"value":"/ the lifetime `'t` corresponds to the originally matched text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423701,"byte_end":423766,"line_start":1052,"line_end":1052,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424422,"byte_end":424436,"line_start":1074,"line_end":1074,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[{"value":"/ An iterator that yields all non-overlapping capture groups matching a","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424124,"byte_end":424197,"line_start":1067,"line_end":1067,"column_start":1,"column_end":74}},{"value":"/ particular regular expression.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424198,"byte_end":424232,"line_start":1068,"line_end":1068,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424233,"byte_end":424236,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ The iterator stops when no more matches can be found.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424237,"byte_end":424294,"line_start":1070,"line_end":1070,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424295,"byte_end":424298,"line_start":1071,"line_end":1071,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424299,"byte_end":424374,"line_start":1072,"line_end":1072,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424375,"byte_end":424410,"line_start":1073,"line_end":1073,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1296},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425121,"byte_end":425128,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[{"value":"/ An iterator over all non-overlapping matches for a particular string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424817,"byte_end":424890,"line_start":1088,"line_end":1088,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424891,"byte_end":424894,"line_start":1089,"line_end":1089,"column_start":1,"column_end":4}},{"value":"/ The iterator yields a `Match` value. The iterator stops when no more","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424895,"byte_end":424967,"line_start":1090,"line_end":1090,"column_start":1,"column_end":73}},{"value":"/ matches can be found.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424968,"byte_end":424993,"line_start":1091,"line_end":1091,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424994,"byte_end":424997,"line_start":1092,"line_end":1092,"column_start":1,"column_end":4}},{"value":"/ `'r` is the lifetime of the compiled regular expression and `'t` is the","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424998,"byte_end":425073,"line_start":1093,"line_end":1093,"column_start":1,"column_end":76}},{"value":"/ lifetime of the matched string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425074,"byte_end":425109,"line_start":1094,"line_end":1094,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":1307},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425753,"byte_end":425761,"line_start":1112,"line_end":1112,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1311}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[{"value":"/ Replacer describes types that can be used to replace matches in a string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425401,"byte_end":425478,"line_start":1106,"line_end":1106,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425479,"byte_end":425482,"line_start":1107,"line_end":1107,"column_start":1,"column_end":4}},{"value":"/ In general, users of this crate shouldn't need to implement this trait,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425483,"byte_end":425558,"line_start":1108,"line_end":1108,"column_start":1,"column_end":76}},{"value":"/ since implementations are already provided for `&str` and","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425559,"byte_end":425620,"line_start":1109,"line_end":1109,"column_start":1,"column_end":62}},{"value":"/ `FnMut(&Captures) -> String` (or any `FnMut(&Captures) -> T`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425621,"byte_end":425685,"line_start":1110,"line_end":1110,"column_start":1,"column_end":65}},{"value":"/ where `T: AsRef<str>`), which covers most use cases.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425686,"byte_end":425742,"line_start":1111,"line_end":1111,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426068,"byte_end":426082,"line_start":1120,"line_end":1120,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"pub fn replace_append(&mut Self, &Captures, &mut String)","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[{"value":"/ Appends text to `dst` to replace the current match.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425768,"byte_end":425823,"line_start":1113,"line_end":1113,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425828,"byte_end":425831,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ The current match is represented by `caps`, which is guaranteed to","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425836,"byte_end":425906,"line_start":1115,"line_end":1115,"column_start":5,"column_end":75}},{"value":"/ have a match at capture group `0`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425911,"byte_end":425949,"line_start":1116,"line_end":1116,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425954,"byte_end":425957,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ For example, a no-op replacement would be","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425962,"byte_end":426007,"line_start":1118,"line_end":1118,"column_start":5,"column_end":50}},{"value":"/ `dst.extend(caps.get(0).unwrap().as_str())`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426012,"byte_end":426060,"line_start":1119,"line_end":1119,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426487,"byte_end":426499,"line_start":1129,"line_end":1129,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"pub fn no_expansion<'r>(&'r mut Self) -> Option<Cow>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[{"value":"/ Return a fixed unchanging replacement string.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426135,"byte_end":426184,"line_start":1122,"line_end":1122,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426189,"byte_end":426192,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ When doing replacements, if access to `Captures` is not needed (e.g.,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426197,"byte_end":426270,"line_start":1124,"line_end":1124,"column_start":5,"column_end":78}},{"value":"/ the replacement byte string does not need `$` expansion), then it can","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426275,"byte_end":426348,"line_start":1125,"line_end":1125,"column_start":5,"column_end":78}},{"value":"/ be beneficial to avoid finding sub-captures.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426353,"byte_end":426401,"line_start":1126,"line_end":1126,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426406,"byte_end":426409,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ In general, this is called once for every call to `replacen`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426414,"byte_end":426479,"line_start":1128,"line_end":1128,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427220,"byte_end":427226,"line_start":1154,"line_end":1154,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"pub fn by_ref<'r>(&'r mut Self) -> ReplacerRef","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[{"value":"/ Return a `Replacer` that borrows and wraps this `Replacer`.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426568,"byte_end":426631,"line_start":1133,"line_end":1133,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426636,"byte_end":426639,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ This is useful when you want to take a generic `Replacer` (which might","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426644,"byte_end":426718,"line_start":1135,"line_end":1135,"column_start":5,"column_end":79}},{"value":"/ not be cloneable) and use it without consuming it, so it can be used","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426723,"byte_end":426795,"line_start":1136,"line_end":1136,"column_start":5,"column_end":77}},{"value":"/ more than once.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426800,"byte_end":426819,"line_start":1137,"line_end":1137,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426824,"byte_end":426827,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426832,"byte_end":426845,"line_start":1139,"line_end":1139,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426850,"byte_end":426853,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426858,"byte_end":426865,"line_start":1141,"line_end":1141,"column_start":5,"column_end":12}},{"value":"/ use regex::{Regex, Replacer};","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426870,"byte_end":426903,"line_start":1142,"line_end":1142,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426908,"byte_end":426911,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ fn replace_all_twice<R: Replacer>(","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426916,"byte_end":426954,"line_start":1144,"line_end":1144,"column_start":5,"column_end":43}},{"value":"/     re: Regex,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426959,"byte_end":426977,"line_start":1145,"line_end":1145,"column_start":5,"column_end":23}},{"value":"/     src: &str,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":426982,"byte_end":427000,"line_start":1146,"line_end":1146,"column_start":5,"column_end":23}},{"value":"/     mut rep: R,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427005,"byte_end":427024,"line_start":1147,"line_end":1147,"column_start":5,"column_end":24}},{"value":"/ ) -> String {","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427029,"byte_end":427046,"line_start":1148,"line_end":1148,"column_start":5,"column_end":22}},{"value":"/     let dst = re.replace_all(src, rep.by_ref());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427051,"byte_end":427103,"line_start":1149,"line_end":1149,"column_start":5,"column_end":57}},{"value":"/     let dst = re.replace_all(&dst, rep.by_ref());","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427108,"byte_end":427161,"line_start":1150,"line_end":1150,"column_start":5,"column_end":58}},{"value":"/     dst.into_owned()","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427166,"byte_end":427190,"line_start":1151,"line_end":1151,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427195,"byte_end":427200,"line_start":1152,"line_end":1152,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427205,"byte_end":427212,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427454,"byte_end":427465,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[{"value":"/ By-reference adaptor for a `Replacer`","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427307,"byte_end":427348,"line_start":1159,"line_end":1159,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427349,"byte_end":427352,"line_start":1160,"line_end":1160,"column_start":1,"column_end":4}},{"value":"/ Returned by [`Replacer::by_ref`](trait.Replacer.html#method.by_ref).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427353,"byte_end":427425,"line_start":1161,"line_end":1161,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428723,"byte_end":428731,"line_start":1201,"line_end":1201,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[{"value":"/ `NoExpand` indicates literal string replacement.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428314,"byte_end":428366,"line_start":1193,"line_end":1193,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428367,"byte_end":428370,"line_start":1194,"line_end":1194,"column_start":1,"column_end":4}},{"value":"/ It can be used with `replace` and `replace_all` to do a literal string","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428371,"byte_end":428445,"line_start":1195,"line_end":1195,"column_start":1,"column_end":75}},{"value":"/ replacement without expanding `$name` to their corresponding capture","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428446,"byte_end":428518,"line_start":1196,"line_end":1196,"column_start":1,"column_end":73}},{"value":"/ groups. This can be both convenient (to avoid escaping `$`, for example)","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428519,"byte_end":428595,"line_start":1197,"line_end":1197,"column_start":1,"column_end":77}},{"value":"/ and performant (since capture groups don't need to be found).","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428596,"byte_end":428661,"line_start":1198,"line_end":1198,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428662,"byte_end":428665,"line_start":1199,"line_end":1199,"column_start":1,"column_end":4}},{"value":"/ `'t` is the lifetime of the literal text.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428666,"byte_end":428711,"line_start":1200,"line_end":1200,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1329},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428736,"byte_end":428747,"line_start":1201,"line_end":1201,"column_start":25,"column_end":36},"name":"0","qualname":"::re_unicode::NoExpand::0","value":"&'t str","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429612,"byte_end":429621,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2411},{"krate":0,"index":2412}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[{"value":"/ A sparse set used for representing ordered NFA states.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429028,"byte_end":429086,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429087,"byte_end":429090,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This supports constant time addition and membership testing. Clearing an","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429091,"byte_end":429167,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ entire set can also be done in constant time. Iteration yields elements","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429168,"byte_end":429243,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ in the order in which they were inserted.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429244,"byte_end":429289,"line_start":8,"line_end":8,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429290,"byte_end":429293,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The data structure is based on: http://research.swtch.com/sparse","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429294,"byte_end":429362,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/ Note though that we don't actually use uninitialized memory. We generally","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429363,"byte_end":429440,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ reuse allocations, so the initial allocation cost is bareable. However,","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429441,"byte_end":429516,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ its other properties listed above are extremely useful.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429517,"byte_end":429576,"line_start":13,"line_end":13,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430000,"byte_end":430003,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"pub fn new(usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430179,"byte_end":430182,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430244,"byte_end":430252,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430318,"byte_end":430326,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430393,"byte_end":430399,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"pub fn insert(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430575,"byte_end":430583,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"pub fn contains(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430711,"byte_end":430716,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23198,"byte_end":23206,"line_start":677,"line_end":677,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"/ The `internal` module exists to support suspicious activity, such as","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":22985,"byte_end":23057,"line_start":672,"line_end":672,"column_start":1,"column_end":73}},{"value":"/ testing different matching engines and supporting the `regex-debug` CLI","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23058,"byte_end":23133,"line_start":673,"line_end":673,"column_start":1,"column_end":76}},{"value":"/ utility.","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23134,"byte_end":23146,"line_start":674,"line_end":674,"column_start":1,"column_end":13}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/lib.rs","byte_start":23162,"byte_end":23189,"line_start":676,"line_end":676,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44585,"byte_end":44593,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":71069,"byte_end":71078,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":73255,"byte_end":73263,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":74196,"byte_end":74208,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":78962,"byte_end":78973,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":80215,"byte_end":80227,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":93216,"byte_end":93222,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95518,"byte_end":95526,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95948,"byte_end":95953,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":100184,"byte_end":100189,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101008,"byte_end":101018,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101322,"byte_end":101325,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":149913,"byte_end":149921,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":150715,"byte_end":150726,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":152587,"byte_end":152597,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153033,"byte_end":153037,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153613,"byte_end":153618,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153889,"byte_end":153900,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154322,"byte_end":154336,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154842,"byte_end":154852,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159972,"byte_end":159977,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160318,"byte_end":160323,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160972,"byte_end":160977,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166187,"byte_end":166198,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":175658,"byte_end":175671,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":176709,"byte_end":176719,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":186146,"byte_end":186156,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201001,"byte_end":201014,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201138,"byte_end":201142,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202995,"byte_end":202999,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":203149,"byte_end":203161,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":208727,"byte_end":208744,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215706,"byte_end":215709,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215805,"byte_end":215808,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224432,"byte_end":224439,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227503,"byte_end":227512,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227686,"byte_end":227695,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227801,"byte_end":227810,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":229929,"byte_end":229938,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230200,"byte_end":230209,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230318,"byte_end":230327,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233573,"byte_end":233577,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233787,"byte_end":233791,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234746,"byte_end":234750,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234832,"byte_end":234836,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234959,"byte_end":234963,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":235192,"byte_end":235196,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/fallback.rs","byte_start":276092,"byte_end":276097,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/fallback.rs","byte_start":276823,"byte_end":276828,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237433,"byte_end":237448,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242580,"byte_end":242587,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245657,"byte_end":245668,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":247383,"byte_end":247396,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":251303,"byte_end":251314,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":256621,"byte_end":256637,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":280247,"byte_end":280252,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":280546,"byte_end":280549,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":289749,"byte_end":289756,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293572,"byte_end":293579,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":296533,"byte_end":296540,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":296681,"byte_end":296688,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301595,"byte_end":301599,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303990,"byte_end":304000,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305412,"byte_end":305421,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306544,"byte_end":306556,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321719,"byte_end":321724,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323134,"byte_end":323139,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323316,"byte_end":323321,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323626,"byte_end":323631,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323715,"byte_end":323720,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323931,"byte_end":323936,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340452,"byte_end":340457,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344495,"byte_end":344500,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346012,"byte_end":346019,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346606,"byte_end":346620,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347195,"byte_end":347200,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348179,"byte_end":348185,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348874,"byte_end":348886,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350314,"byte_end":350330,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352068,"byte_end":352076,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":355054,"byte_end":355062,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":355289,"byte_end":355302,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":356793,"byte_end":356801,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357437,"byte_end":357445,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358229,"byte_end":358246,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360608,"byte_end":360619,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361205,"byte_end":361206,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361861,"byte_end":361869,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1045},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378644,"byte_end":378653,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380207,"byte_end":380225,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383716,"byte_end":383723,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383998,"byte_end":384005,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385227,"byte_end":385241,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385526,"byte_end":385540,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387668,"byte_end":387673,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390772,"byte_end":390777,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390954,"byte_end":390959,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391147,"byte_end":391152,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391236,"byte_end":391241,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391452,"byte_end":391457,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":407971,"byte_end":407976,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1183},{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412015,"byte_end":412020,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413400,"byte_end":413412,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414011,"byte_end":414016,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414988,"byte_end":414994,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416487,"byte_end":416503,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418230,"byte_end":418238,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421176,"byte_end":421184,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421411,"byte_end":421424,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":422471,"byte_end":422479,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423111,"byte_end":423119,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423899,"byte_end":423916,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424522,"byte_end":424536,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425207,"byte_end":425214,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427548,"byte_end":427559,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428139,"byte_end":428140,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428773,"byte_end":428781,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429977,"byte_end":429986,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430782,"byte_end":430791,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/backtrack.rs","byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":44585,"byte_end":44593,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":71069,"byte_end":71078,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":73255,"byte_end":73263,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":74196,"byte_end":74208,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":78962,"byte_end":78973,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/compile.rs","byte_start":80215,"byte_end":80227,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":93216,"byte_end":93222,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95518,"byte_end":95526,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":217},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":95948,"byte_end":95953,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":100184,"byte_end":100189,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101008,"byte_end":101018,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":101322,"byte_end":101325,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":149913,"byte_end":149921,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":150715,"byte_end":150726,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":152587,"byte_end":152597,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153033,"byte_end":153037,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153613,"byte_end":153618,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1548},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":153889,"byte_end":153900,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1515},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154322,"byte_end":154336,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/dfa.rs","byte_start":154842,"byte_end":154852,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1594},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":159972,"byte_end":159977,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1618},"to":{"krate":1,"index":1658}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160318,"byte_end":160323,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1618},"to":{"krate":2,"index":6215}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/error.rs","byte_start":160972,"byte_end":160977,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1618},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":166187,"byte_end":166198,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":175658,"byte_end":175671,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":372},"to":{"krate":0,"index":1064}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":176709,"byte_end":176719,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1633},"to":{"krate":0,"index":1064}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":186146,"byte_end":186156,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201001,"byte_end":201014,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":201138,"byte_end":201142,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":202995,"byte_end":202999,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":369},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":203149,"byte_end":203161,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/exec.rs","byte_start":208727,"byte_end":208744,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215706,"byte_end":215709,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1728},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/expand.rs","byte_start":215805,"byte_end":215808,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1728},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":224432,"byte_end":224439,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227503,"byte_end":227512,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227686,"byte_end":227695,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":227801,"byte_end":227810,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1765},"to":{"krate":0,"index":534}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":229929,"byte_end":229938,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230200,"byte_end":230209,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1777},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":230318,"byte_end":230327,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1777},"to":{"krate":0,"index":534}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233573,"byte_end":233577,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1789},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":233787,"byte_end":233791,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234746,"byte_end":234750,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1789},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234832,"byte_end":234836,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1789},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":234959,"byte_end":234963,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1789},"to":{"krate":2,"index":1653}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/input.rs","byte_start":235192,"byte_end":235196,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1789},"to":{"krate":2,"index":1690}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_avx2/fallback.rs","byte_start":276092,"byte_end":276097,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/teddy_ssse3/fallback.rs","byte_start":276823,"byte_end":276828,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":237433,"byte_end":237448,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":242580,"byte_end":242587,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":245657,"byte_end":245668,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":247383,"byte_end":247396,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":251303,"byte_end":251314,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/literal/mod.rs","byte_start":256621,"byte_end":256637,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":280247,"byte_end":280252,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":280546,"byte_end":280549,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/pikevm.rs","byte_start":289749,"byte_end":289756,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":293572,"byte_end":293579,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":296533,"byte_end":296540,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1944},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":296681,"byte_end":296688,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1944},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":301595,"byte_end":301599,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1962},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":303990,"byte_end":304000,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/prog.rs","byte_start":305412,"byte_end":305421,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_builder.rs","byte_start":306544,"byte_end":306556,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2059},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":321719,"byte_end":321724,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323134,"byte_end":323139,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2187},"to":{"krate":2,"index":6215}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323316,"byte_end":323321,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2187},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323626,"byte_end":323631,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2187},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323715,"byte_end":323720,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2187},"to":{"krate":2,"index":7741}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":323931,"byte_end":323936,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":340452,"byte_end":340457,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":344495,"byte_end":344500,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346012,"byte_end":346019,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":346606,"byte_end":346620,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":914},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":347195,"byte_end":347200,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":925},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348179,"byte_end":348185,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":935},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":348874,"byte_end":348886,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":350314,"byte_end":350330,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":352068,"byte_end":352076,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":355054,"byte_end":355062,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":961},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":355289,"byte_end":355302,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":979},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":356793,"byte_end":356801,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":961},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":357437,"byte_end":357445,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":961},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":358229,"byte_end":358246,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1007},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":360608,"byte_end":360619,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2199},"to":{"krate":0,"index":1019}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361205,"byte_end":361206,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1036},"to":{"krate":0,"index":1019}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_bytes.rs","byte_start":361861,"byte_end":361869,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1039},"to":{"krate":0,"index":1019}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":378644,"byte_end":378653,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":380207,"byte_end":380225,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1056},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":381356,"byte_end":381361,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":1064}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383716,"byte_end":383723,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":383998,"byte_end":384005,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1075},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385227,"byte_end":385241,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_trait.rs","byte_start":385526,"byte_end":385540,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1092},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":387668,"byte_end":387673,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390772,"byte_end":390777,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":6215}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":390954,"byte_end":390959,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391147,"byte_end":391152,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391236,"byte_end":391241,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":7741}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":391452,"byte_end":391457,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":407971,"byte_end":407976,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":412015,"byte_end":412020,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":413400,"byte_end":413412,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1194},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414011,"byte_end":414016,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1205},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":414988,"byte_end":414994,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1215},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":416487,"byte_end":416503,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":418230,"byte_end":418238,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421176,"byte_end":421184,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":421411,"byte_end":421424,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1248},"to":{"krate":2,"index":6210}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":422471,"byte_end":422479,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423111,"byte_end":423119,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":423899,"byte_end":423916,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1273},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":424522,"byte_end":424536,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1285},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":425207,"byte_end":425214,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1296},"to":{"krate":2,"index":4996}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":427548,"byte_end":427559,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2401},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428139,"byte_end":428140,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1323},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/re_unicode.rs","byte_start":428773,"byte_end":428781,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1326},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":429977,"byte_end":429986,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hkierans/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.6/src/sparse.rs","byte_start":430782,"byte_end":430791,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2410},"to":{"krate":2,"index":2098}}]}